%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 21.05.0 (http://poppler.freedesktop.org)
%%Creator: Matplotlib v3.3.3, https://matplotlib.org
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 935 650
%%HiResBoundingBox: 0 0 934.267188 649.675
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_14_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -463 1794 1233] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 36 dict def
CharProcs begin
/A {
684 0 8 0 676 729 setcachedevice
q
342 632 m
208 269 l
476 269 l
342 632 l
286 729 m
398 729 l
676 0 l
573 0 l
507 187 l
178 187 l
112 0 l
8 0 l
286 729 l
f
Q
} def
/B {
686 0 98 0 615 729 setcachedevice
q
197 348 m
197 81 l
355 81 l
408 81 447 92 473 114 c
498 136 511 169 511 215 c
511 260 498 293 473 315 c
447 337 408 348 355 348 c
197 348 l
197 648 m
197 428 l
343 428 l
391 428 426 437 450 455 c
474 473 486 500 486 538 c
486 574 474 602 450 620 c
426 638 391 648 343 648 c
197 648 l
98 729 m
350 729 l
425 729 483 713 524 682 c
564 650 585 606 585 549 c
585 504 574 468 553 442 c
532 416 502 399 462 393 c
510 382 548 360 575 327 c
601 294 615 253 615 204 c
615 138 592 88 548 53 c
504 17 441 0 360 0 c
98 0 l
98 729 l
f
Q
} def
/C {
698 0 56 -13 644 742 setcachedevice
q
644 673 m
644 569 l
610 599 575 622 537 638 c
499 653 460 661 418 661 c
334 661 270 635 226 584 c
182 533 160 460 160 364 c
160 268 182 194 226 143 c
270 92 334 67 418 67 c
460 67 499 74 537 90 c
575 105 610 128 644 159 c
644 56 l
609 32 572 15 534 4 c
496 -7 455 -13 412 -13 c
302 -13 215 20 151 87 c
87 154 56 246 56 364 c
56 481 87 573 151 641 c
215 708 302 742 412 742 c
456 742 497 736 535 725 c
573 713 610 696 644 673 c
f
Q
} def
/E {
632 0 98 0 568 729 setcachedevice
q
98 729 m
559 729 l
559 646 l
197 646 l
197 430 l
544 430 l
544 347 l
197 347 l
197 83 l
568 83 l
568 0 l
98 0 l
98 729 l
f
Q
} def
/G {
775 0 56 -13 693 742 setcachedevice
q
595 104 m
595 300 l
434 300 l
434 381 l
693 381 l
693 68 l
655 40 613 20 567 7 c
521 -6 472 -13 420 -13 c
306 -13 216 20 152 86 c
88 152 56 245 56 364 c
56 482 88 575 152 642 c
216 708 306 742 420 742 c
467 742 512 736 555 724 c
598 712 638 695 674 673 c
674 568 l
637 598 598 621 557 637 c
516 653 473 661 428 661 c
338 661 271 636 227 586 c
182 536 160 462 160 364 c
160 265 182 191 227 141 c
271 91 338 67 428 67 c
462 67 493 70 521 76 c
549 82 573 91 595 104 c
f
Q
} def
/H {
752 0 98 0 654 729 setcachedevice
q
98 729 m
197 729 l
197 430 l
555 430 l
555 729 l
654 729 l
654 0 l
555 0 l
555 347 l
197 347 l
197 0 l
98 0 l
98 729 l
f
Q
} def
/I {
295 0 98 0 197 729 setcachedevice
q
98 0 99 729 re
f
Q
} def
/L {
557 0 98 0 552 729 setcachedevice
q
98 729 m
197 729 l
197 83 l
552 83 l
552 0 l
98 0 l
98 729 l
f
Q
} def
/M {
863 0 98 0 765 729 setcachedevice
q
98 729 m
245 729 l
431 233 l
618 729 l
765 729 l
765 0 l
669 0 l
669 640 l
481 140 l
382 140 l
194 640 l
194 0 l
98 0 l
98 729 l
f
Q
} def
/N {
748 0 98 0 650 729 setcachedevice
q
98 729 m
231 729 l
554 119 l
554 729 l
650 729 l
650 0 l
517 0 l
194 610 l
194 0 l
98 0 l
98 729 l
f
Q
} def
/O {
787 0 56 -13 731 742 setcachedevice
q
394 662 m
322 662 265 635 223 582 c
181 528 160 456 160 364 c
160 272 181 199 223 146 c
265 92 322 66 394 66 c
465 66 522 92 564 146 c
606 199 627 272 627 364 c
627 456 606 528 564 582 c
522 635 465 662 394 662 c
394 742 m
496 742 577 707 639 639 c
700 571 731 479 731 364 c
731 248 700 157 639 89 c
577 21 496 -13 394 -13 c
291 -13 209 21 148 89 c
86 157 56 248 56 364 c
56 479 86 571 148 639 c
209 707 291 742 394 742 c
f
Q
} def
/R {
695 0 98 0 666 729 setcachedevice
q
444 342 m
465 334 486 319 506 296 c
526 272 546 240 566 199 c
666 0 l
560 0 l
467 187 l
443 235 419 268 397 284 c
374 300 343 308 304 308 c
197 308 l
197 0 l
98 0 l
98 729 l
321 729 l
404 729 466 711 507 677 c
548 642 569 589 569 519 c
569 473 558 434 537 404 c
515 374 484 353 444 342 c
197 648 m
197 389 l
321 389 l
368 389 404 400 428 422 c
452 444 465 476 465 519 c
465 561 452 593 428 615 c
404 637 368 648 321 648 c
197 648 l
f
Q
} def
/S {
635 0 66 -13 579 742 setcachedevice
q
535 705 m
535 609 l
497 627 462 640 429 649 c
395 657 363 662 333 662 c
279 662 237 651 208 631 c
179 610 165 580 165 542 c
165 510 174 485 194 469 c
213 452 250 439 304 429 c
364 417 l
437 403 491 378 526 343 c
561 307 579 260 579 201 c
579 130 555 77 508 41 c
460 5 391 -13 300 -13 c
265 -13 228 -9 189 -2 c
150 5 110 16 69 32 c
69 134 l
109 111 148 94 186 83 c
224 71 262 66 300 66 c
356 66 399 77 430 99 c
460 121 476 152 476 194 c
476 230 465 258 443 278 c
421 298 385 313 335 323 c
275 335 l
201 349 148 372 115 404 c
82 435 66 478 66 534 c
66 598 88 649 134 686 c
179 723 242 742 322 742 c
356 742 390 739 426 733 c
461 727 497 717 535 705 c
f
Q
} def
/Y {
611 0 -1 0 613 729 setcachedevice
q
-1 729 m
104 729 l
306 429 l
507 729 l
613 729 l
355 347 l
355 0 l
256 0 l
256 347 l
-1 729 l
f
Q
} def
/a {
613 0 60 -13 522 560 setcachedevice
q
343 275 m
270 275 220 266 192 250 c
164 233 150 205 150 165 c
150 133 160 107 181 89 c
202 70 231 61 267 61 c
317 61 357 78 387 114 c
417 149 432 196 432 255 c
432 275 l
343 275 l
522 312 m
522 0 l
432 0 l
432 83 l
411 49 385 25 355 10 c
325 -5 287 -13 243 -13 c
187 -13 142 2 109 33 c
76 64 60 106 60 159 c
60 220 80 266 122 298 c
163 329 224 345 306 345 c
432 345 l
432 354 l
432 395 418 427 391 450 c
364 472 326 484 277 484 c
245 484 215 480 185 472 c
155 464 127 453 100 439 c
100 522 l
132 534 164 544 195 550 c
226 556 256 560 286 560 c
365 560 424 539 463 498 c
502 457 522 395 522 312 c
f
Q
} def
/c {
550 0 55 -13 488 560 setcachedevice
q
488 526 m
488 442 l
462 456 437 466 411 473 c
385 480 360 484 334 484 c
276 484 230 465 198 428 c
166 391 150 339 150 273 c
150 206 166 154 198 117 c
230 80 276 62 334 62 c
360 62 385 65 411 72 c
437 79 462 90 488 104 c
488 21 l
462 9 436 0 410 -5 c
383 -10 354 -13 324 -13 c
242 -13 176 12 128 64 c
79 115 55 185 55 273 c
55 362 79 432 128 483 c
177 534 244 560 330 560 c
358 560 385 557 411 551 c
437 545 463 537 488 526 c
f
Q
} def
/d {
635 0 55 -13 544 760 setcachedevice
q
454 464 m
454 760 l
544 760 l
544 0 l
454 0 l
454 82 l
435 49 411 25 382 10 c
353 -5 319 -13 279 -13 c
213 -13 159 13 117 65 c
75 117 55 187 55 273 c
55 359 75 428 117 481 c
159 533 213 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
148 273 m
148 207 161 155 188 117 c
215 79 253 61 301 61 c
348 61 385 79 413 117 c
440 155 454 207 454 273 c
454 339 440 390 413 428 c
385 466 348 485 301 485 c
253 485 215 466 188 428 c
161 390 148 339 148 273 c
f
Q
} def
/e {
615 0 55 -13 562 560 setcachedevice
q
562 296 m
562 252 l
149 252 l
153 190 171 142 205 110 c
238 78 284 62 344 62 c
378 62 412 66 444 74 c
476 82 509 95 541 113 c
541 28 l
509 14 476 3 442 -3 c
408 -9 373 -13 339 -13 c
251 -13 182 12 131 62 c
80 112 55 181 55 268 c
55 357 79 428 127 481 c
175 533 241 560 323 560 c
397 560 455 536 498 489 c
540 441 562 377 562 296 c
472 322 m
471 371 457 410 431 440 c
404 469 368 484 324 484 c
274 484 234 469 204 441 c
174 413 156 373 152 322 c
472 322 l
f
Q
} def
/five {
636 0 77 -13 549 729 setcachedevice
q
108 729 m
495 729 l
495 646 l
198 646 l
198 467 l
212 472 227 476 241 478 c
255 480 270 482 284 482 c
365 482 429 459 477 415 c
525 370 549 310 549 234 c
549 155 524 94 475 51 c
426 8 357 -13 269 -13 c
238 -13 207 -10 175 -6 c
143 -1 111 6 77 17 c
77 116 l
106 100 136 88 168 80 c
199 72 232 69 267 69 c
323 69 368 83 401 113 c
433 143 450 183 450 234 c
450 284 433 324 401 354 c
368 384 323 399 267 399 c
241 399 214 396 188 390 c
162 384 135 375 108 363 c
108 729 l
f
Q
} def
/four {
636 0 49 0 580 729 setcachedevice
q
378 643 m
129 254 l
378 254 l
378 643 l
352 729 m
476 729 l
476 254 l
580 254 l
580 172 l
476 172 l
476 0 l
378 0 l
378 172 l
49 172 l
49 267 l
352 729 l
f
Q
} def
/g {
635 0 55 -207 544 560 setcachedevice
q
454 280 m
454 344 440 395 414 431 c
387 467 349 485 301 485 c
253 485 215 467 188 431 c
161 395 148 344 148 280 c
148 215 161 165 188 129 c
215 93 253 75 301 75 c
349 75 387 93 414 129 c
440 165 454 215 454 280 c
544 68 m
544 -24 523 -93 482 -139 c
440 -184 377 -207 292 -207 c
260 -207 231 -204 203 -200 c
175 -195 147 -188 121 -178 c
121 -91 l
147 -105 173 -115 199 -122 c
225 -129 251 -133 278 -133 c
336 -133 380 -117 410 -87 c
439 -56 454 -10 454 52 c
454 96 l
435 64 411 40 382 24 c
353 8 319 0 279 0 c
211 0 157 25 116 76 c
75 127 55 195 55 280 c
55 364 75 432 116 483 c
157 534 211 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
454 547 l
544 547 l
544 68 l
f
Q
} def
/hyphen {
361 0 49 234 312 314 setcachedevice
q
49 234 263 80 re
f
Q
} def
/i {
278 0 94 0 184 760 setcachedevice
q
94 547 m
184 547 l
184 0 l
94 0 l
94 547 l
94 760 m
184 760 l
184 646 l
94 646 l
94 760 l
f
Q
} def
/l {
278 0 94 0 184 760 setcachedevice
q
94 0 90 760 re
f
Q
} def
/m {
974 0 91 0 889 560 setcachedevice
q
520 442 m
542 482 569 511 600 531 c
631 550 668 560 711 560 c
767 560 811 540 842 500 c
873 460 889 403 889 330 c
889 0 l
799 0 l
799 327 l
799 379 789 418 771 444 c
752 469 724 482 686 482 c
639 482 602 466 575 435 c
548 404 535 362 535 309 c
535 0 l
445 0 l
445 327 l
445 379 435 418 417 444 c
398 469 369 482 331 482 c
285 482 248 466 221 435 c
194 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
201 495 226 520 255 536 c
283 552 317 560 357 560 c
397 560 430 550 458 530 c
486 510 506 480 520 442 c
f
Q
} def
/n {
634 0 91 0 549 560 setcachedevice
q
549 330 m
549 0 l
459 0 l
459 327 l
459 379 448 417 428 443 c
408 469 378 482 338 482 c
289 482 251 466 223 435 c
195 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
202 494 227 519 257 535 c
286 551 320 560 358 560 c
420 560 468 540 500 501 c
532 462 549 405 549 330 c
f
Q
} def
/o {
612 0 55 -13 557 560 setcachedevice
q
306 484 m
258 484 220 465 192 427 c
164 389 150 338 150 273 c
150 207 163 156 191 118 c
219 80 257 62 306 62 c
354 62 392 80 420 118 c
448 156 462 207 462 273 c
462 337 448 389 420 427 c
392 465 354 484 306 484 c
306 560 m
384 560 445 534 490 484 c
534 433 557 363 557 273 c
557 183 534 113 490 63 c
445 12 384 -13 306 -13 c
227 -13 165 12 121 63 c
77 113 55 183 55 273 c
55 363 77 433 121 484 c
165 534 227 560 306 560 c
f
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
124 83 m
285 83 l
285 639 l
110 604 l
110 694 l
284 729 l
383 729 l
383 83 l
544 83 l
544 0 l
124 0 l
124 83 l
f
Q
} def
/r {
411 0 91 0 411 560 setcachedevice
q
411 463 m
401 469 390 473 378 476 c
366 478 353 480 339 480 c
288 480 249 463 222 430 c
194 397 181 350 181 288 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
199 495 224 520 254 536 c
284 552 321 560 365 560 c
371 560 378 559 386 559 c
393 558 401 557 411 555 c
411 463 l
f
Q
} def
/s {
521 0 54 -13 472 560 setcachedevice
q
443 531 m
443 446 l
417 458 391 468 364 475 c
336 481 308 485 279 485 c
234 485 200 478 178 464 c
156 450 145 430 145 403 c
145 382 153 366 169 354 c
185 342 217 330 265 320 c
296 313 l
360 299 405 279 432 255 c
458 230 472 195 472 151 c
472 100 452 60 412 31 c
372 1 316 -13 246 -13 c
216 -13 186 -10 154 -5 c
122 0 89 8 54 20 c
54 113 l
87 95 120 82 152 74 c
184 65 216 61 248 61 c
290 61 323 68 346 82 c
368 96 380 117 380 144 c
380 168 371 187 355 200 c
339 213 303 226 247 238 c
216 245 l
160 257 119 275 95 299 c
70 323 58 356 58 399 c
58 450 76 490 112 518 c
148 546 200 560 268 560 c
301 560 332 557 362 552 c
391 547 418 540 443 531 c
f
Q
} def
/space {
318 0 0 0 0 0 setcachedevice
q
Q
} def
/t {
392 0 27 0 368 702 setcachedevice
q
183 702 m
183 547 l
368 547 l
368 477 l
183 477 l
183 180 l
183 135 189 106 201 94 c
213 81 238 75 276 75 c
368 75 l
368 0 l
276 0 l
206 0 158 13 132 39 c
106 65 93 112 93 180 c
93 477 l
27 477 l
27 547 l
93 547 l
93 702 l
183 702 l
f
Q
} def
/three {
636 0 76 -13 556 742 setcachedevice
q
406 393 m
453 383 490 362 516 330 c
542 298 556 258 556 212 c
556 140 531 84 482 45 c
432 6 362 -13 271 -13 c
240 -13 208 -10 176 -4 c
144 1 110 10 76 22 c
76 117 l
103 101 133 89 166 81 c
198 73 232 69 268 69 c
330 69 377 81 409 105 c
441 129 458 165 458 212 c
458 254 443 288 413 312 c
383 336 341 349 287 349 c
202 349 l
202 430 l
291 430 l
339 430 376 439 402 459 c
428 478 441 506 441 543 c
441 580 427 609 401 629 c
374 649 336 659 287 659 c
260 659 231 656 200 650 c
169 644 135 635 98 623 c
98 711 l
135 721 170 729 203 734 c
235 739 266 742 296 742 c
370 742 429 725 473 691 c
517 657 539 611 539 553 c
539 513 527 479 504 451 c
481 423 448 403 406 393 c
f
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
192 83 m
536 83 l
536 0 l
73 0 l
73 83 l
110 121 161 173 226 239 c
290 304 331 346 348 365 c
380 400 402 430 414 455 c
426 479 433 504 433 528 c
433 566 419 598 392 622 c
365 646 330 659 286 659 c
255 659 222 653 188 643 c
154 632 117 616 78 594 c
78 694 l
118 710 155 722 189 730 c
223 738 255 742 284 742 c
359 742 419 723 464 685 c
509 647 532 597 532 534 c
532 504 526 475 515 449 c
504 422 484 390 454 354 c
446 344 420 317 376 272 c
332 227 271 164 192 83 c
f
Q
} def
/u {
634 0 85 -13 543 560 setcachedevice
q
85 216 m
85 547 l
175 547 l
175 219 l
175 167 185 129 205 103 c
225 77 255 64 296 64 c
344 64 383 79 411 110 c
439 141 453 183 453 237 c
453 547 l
543 547 l
543 0 l
453 0 l
453 84 l
431 50 405 26 377 10 c
348 -5 315 -13 277 -13 c
214 -13 166 6 134 45 c
101 83 85 140 85 216 c
311 560 m
311 560 l
f
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
318 664 m
267 664 229 639 203 589 c
177 539 165 464 165 364 c
165 264 177 189 203 139 c
229 89 267 64 318 64 c
369 64 407 89 433 139 c
458 189 471 264 471 364 c
471 464 458 539 433 589 c
407 639 369 664 318 664 c
318 742 m
399 742 461 709 505 645 c
548 580 570 486 570 364 c
570 241 548 147 505 83 c
461 19 399 -13 318 -13 c
236 -13 173 19 130 83 c
87 147 66 241 66 364 c
66 486 87 580 130 645 c
173 709 236 742 318 742 c
f
Q
} def
end
currentdict end
/T3_14_0 exch definefont pop
%%EndResource
/F14_0 /T3_14_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 934.267188 649.675 re
W
q
1 j
/DeviceGray {} cs
[1] sc
0 j
0 w
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
0 0 934.267187 649.675 re
f
/DeviceGray {} CS
[0] SC
75.746875 52.075 837 554.4 re
f
/DeviceGray {} cs
[0] sc
1 j
0.8 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
75.746875 52.075 m
75.746875 48.575 l
f
75.746875 52.075 m
75.746875 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
70.973437 33.684375 Td
/F14_0 15 Tf
(0)
[9.54
0] Tj
0.8 w
243.146875 52.075 m
243.146875 48.575 l
f
243.146875 52.075 m
243.146875 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
233.6 33.684375 Td
/F14_0 15 Tf
(50)
[9.54
0
9.54
0] Tj
0.8 w
410.546875 52.075 m
410.546875 48.575 l
f
410.546875 52.075 m
410.546875 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
396.226562 33.684375 Td
/F14_0 15 Tf
(100)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
577.946875 52.075 m
577.946875 48.575 l
f
577.946875 52.075 m
577.946875 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
563.626563 33.684375 Td
/F14_0 15 Tf
(150)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
745.346875 52.075 m
745.346875 48.575 l
f
745.346875 52.075 m
745.346875 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
731.026563 33.684375 Td
/F14_0 15 Tf
(200)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
912.746875 52.075 m
912.746875 48.575 l
f
912.746875 52.075 m
912.746875 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
898.426562 33.684375 Td
/F14_0 15 Tf
(250)
[9.54
0
9.54
0
9.54
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
433.614063 11.35625 Td
/F14_0 20 Tf
(Milliseconds)
[17.26
0
5.56
0
5.56
0
5.56
0
5.56
0
10.42
0
12.3
0
11
0
12.24
0
12.68
0
12.7
0
10.42
0] Tj
0.8 w
75.746875 52.075 m
72.246875 52.075 l
f
75.746875 52.075 m
72.246875 52.075 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
59.2 46.379687 Td
/F14_0 15 Tf
(0)
[9.54
0] Tj
0.8 w
75.746875 162.955 m
72.246875 162.955 l
f
75.746875 162.955 m
72.246875 162.955 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 157.259687 Td
/F14_0 15 Tf
(1000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 273.835 m
72.246875 273.835 l
f
75.746875 273.835 m
72.246875 273.835 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 268.139688 Td
/F14_0 15 Tf
(2000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 384.715 m
72.246875 384.715 l
f
75.746875 384.715 m
72.246875 384.715 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 379.019688 Td
/F14_0 15 Tf
(3000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 495.595 m
72.246875 495.595 l
f
75.746875 495.595 m
72.246875 495.595 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 489.899688 Td
/F14_0 15 Tf
(4000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 606.475 m
72.246875 606.475 l
f
75.746875 606.475 m
72.246875 606.475 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 600.779688 Td
/F14_0 15 Tf
(5000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 22.403125 266.923437] Tm
0 0 Td
0 0 Td
/F14_0 20 Tf
(Occurrences)
[15.74
0
11
0
11
0
12.68
0
8.22
0
8.22
0
12.3
0
12.68
0
11
0
12.3
0
10.42
0] Tj
q
75.746875 52.075 837 554.4 re
W
0.75 w
/DeviceRGB {} cs
[0 0 0] sc
316.802875 52.075 m
316.802875 482.73292 l
S
397.154875 52.075 m
397.154875 262.96876 l
S
313.454875 52.075 m
313.454875 223.82812 l
S
236.450875 52.075 m
236.450875 165.28348 l
S
290.018875 52.075 m
290.018875 160.95916 l
S
320.150875 52.075 m
320.150875 140.44636 l
S
310.106875 52.075 m
310.106875 130.68892 l
S
343.586875 52.075 m
343.586875 126.03196 l
S
306.758875 52.075 m
306.758875 124.92316 l
S
393.806875 52.075 m
393.806875 123.37084 l
S
303.410875 52.075 m
303.410875 121.9294 l
S
300.062875 52.075 m
300.062875 114.94396 l
S
293.366875 52.075 m
293.366875 111.3958 l
S
477.506875 52.075 m
477.506875 111.06316 l
S
286.670875 52.075 m
286.670875 107.62588 l
S
400.502875 52.075 m
400.502875 107.515 l
S
263.234875 52.075 m
263.234875 105.18652 l
S
370.370875 52.075 m
370.370875 104.1886 l
S
323.498875 52.075 m
323.498875 104.1886 l
S
296.714875 52.075 m
296.714875 103.85596 l
S
233.102875 52.075 m
233.102875 102.19276 l
S
340.238875 52.075 m
340.238875 100.3078 l
S
336.890875 52.075 m
336.890875 98.6446 l
S
333.542875 52.075 m
333.542875 96.53788 l
S
330.194875 52.075 m
330.194875 94.7638 l
S
410.546875 52.075 m
410.546875 94.65292 l
S
326.846875 52.075 m
326.846875 94.32028 l
S
407.198875 52.075 m
407.198875 91.32652 l
S
346.934875 52.075 m
346.934875 90.883 l
S
283.322875 52.075 m
283.322875 89.7742 l
S
367.022875 52.075 m
367.022875 88.77628 l
S
259.886875 52.075 m
259.886875 87.5566 l
S
239.798875 52.075 m
239.798875 85.11724 l
S
350.282875 52.075 m
350.282875 84.67372 l
S
373.718875 52.075 m
373.718875 83.56492 l
S
403.850875 52.075 m
403.850875 83.34316 l
S
266.582875 52.075 m
266.582875 82.567 l
S
363.674875 52.075 m
363.674875 82.34524 l
S
276.626875 52.075 m
276.626875 82.12348 l
S
377.066875 52.075 m
377.066875 81.67996 l
S
390.458875 52.075 m
390.458875 81.34732 l
S
243.146875 52.075 m
243.146875 81.12556 l
S
380.414875 52.075 m
380.414875 80.57116 l
S
246.494875 52.075 m
246.494875 80.46028 l
S
423.938875 52.075 m
423.938875 80.3494 l
S
356.978875 52.075 m
356.978875 80.3494 l
S
229.754875 52.075 m
229.754875 80.23852 l
S
387.110875 52.075 m
387.110875 80.12764 l
S
360.326875 52.075 m
360.326875 79.12972 l
S
353.630875 52.075 m
353.630875 79.01884 l
S
256.538875 52.075 m
256.538875 78.6862 l
S
249.842875 52.075 m
249.842875 78.46444 l
S
253.190875 52.075 m
253.190875 78.02092 l
S
269.930875 52.075 m
269.930875 77.79916 l
S
474.158875 52.075 m
474.158875 77.5774 l
S
413.894875 52.075 m
413.894875 76.91212 l
S
279.974875 52.075 m
279.974875 76.91212 l
S
383.762875 52.075 m
383.762875 76.4686 l
S
273.278875 52.075 m
273.278875 76.24684 l
S
420.590875 52.075 m
420.590875 75.9142 l
S
226.406875 52.075 m
226.406875 75.58156 l
S
450.722875 52.075 m
450.722875 74.14012 l
S
557.858875 52.075 m
557.858875 73.6966 l
S
417.242875 52.075 m
417.242875 71.70076 l
S
223.058875 52.075 m
223.058875 71.14636 l
S
427.286875 52.075 m
427.286875 70.14844 l
S
209.666875 52.075 m
209.666875 70.14844 l
S
480.854875 52.075 m
480.854875 69.59404 l
S
216.362875 52.075 m
216.362875 69.37228 l
S
447.374875 52.075 m
447.374875 68.707 l
S
213.014875 52.075 m
213.014875 68.59612 l
S
484.202875 52.075 m
484.202875 68.1526 l
S
206.318875 52.075 m
206.318875 68.1526 l
S
430.634875 52.075 m
430.634875 68.04172 l
S
467.462875 52.075 m
467.462875 67.93084 l
S
470.810875 52.075 m
470.810875 67.15468 l
S
219.710875 52.075 m
219.710875 67.15468 l
S
457.418875 52.075 m
457.418875 67.0438 l
S
531.074875 52.075 m
531.074875 66.4894 l
S
440.678875 52.075 m
440.678875 66.37852 l
S
202.970875 52.075 m
202.970875 66.37852 l
S
444.026875 52.075 m
444.026875 66.15676 l
S
464.114875 52.075 m
464.114875 66.15676 l
S
487.550875 52.075 m
487.550875 66.15676 l
S
433.982875 52.075 m
433.982875 65.71324 l
S
454.070875 52.075 m
454.070875 65.49148 l
S
437.330875 52.075 m
437.330875 65.04796 l
S
504.290875 52.075 m
504.290875 64.93708 l
S
460.766875 52.075 m
460.766875 64.60444 l
S
199.622875 52.075 m
199.622875 64.2718 l
S
500.942875 52.075 m
500.942875 64.05004 l
S
196.274875 52.075 m
196.274875 61.94332 l
S
182.882875 52.075 m
182.882875 61.83244 l
S
189.578875 52.075 m
189.578875 61.4998 l
S
554.510875 52.075 m
554.510875 61.27804 l
S
497.594875 52.075 m
497.594875 61.27804 l
S
490.898875 52.075 m
490.898875 60.83452 l
S
507.638875 52.075 m
507.638875 60.72364 l
S
494.246875 52.075 m
494.246875 60.50188 l
S
527.726875 52.075 m
527.726875 60.28012 l
S
176.186875 52.075 m
176.186875 60.05836 l
S
186.230875 52.075 m
186.230875 59.8366 l
S
524.378875 52.075 m
524.378875 59.8366 l
S
510.986875 52.075 m
510.986875 59.8366 l
S
192.926875 52.075 m
192.926875 59.72572 l
S
517.682875 52.075 m
517.682875 59.50396 l
S
638.210875 52.075 m
638.210875 58.94956 l
S
534.422875 52.075 m
534.422875 58.83868 l
S
514.334875 52.075 m
514.334875 58.83868 l
S
79.094875 52.075 m
79.094875 58.83868 l
S
179.534875 52.075 m
179.534875 58.83868 l
S
561.206875 52.075 m
561.206875 58.28428 l
S
521.030875 52.075 m
521.030875 58.06252 l
S
544.466875 52.075 m
544.466875 57.84076 l
S
172.838875 52.075 m
172.838875 57.619 l
S
156.098875 52.075 m
156.098875 57.50812 l
S
547.814875 52.075 m
547.814875 57.50812 l
S
169.490875 52.075 m
169.490875 57.39724 l
S
537.770875 52.075 m
537.770875 57.0646 l
S
162.794875 52.075 m
162.794875 56.95372 l
S
577.946875 52.075 m
577.946875 56.73196 l
S
152.750875 52.075 m
152.750875 56.62108 l
S
166.142875 52.075 m
166.142875 56.5102 l
S
551.162875 52.075 m
551.162875 56.5102 l
S
541.118875 52.075 m
541.118875 56.39932 l
S
571.250875 52.075 m
571.250875 56.28844 l
S
567.902875 52.075 m
567.902875 56.28844 l
S
564.554875 52.075 m
564.554875 55.84492 l
S
587.990875 52.075 m
587.990875 55.73404 l
S
159.446875 52.075 m
159.446875 55.73404 l
S
82.442875 52.075 m
82.442875 55.29052 l
S
146.054875 52.075 m
146.054875 55.06876 l
S
584.642875 52.075 m
584.642875 55.06876 l
S
149.402875 52.075 m
149.402875 54.95788 l
S
574.598875 52.075 m
574.598875 54.95788 l
S
139.358875 52.075 m
139.358875 54.95788 l
S
129.314875 52.075 m
129.314875 54.847 l
S
594.686875 52.075 m
594.686875 54.73612 l
S
125.966875 52.075 m
125.966875 54.73612 l
S
608.078875 52.075 m
608.078875 54.73612 l
S
611.426875 52.075 m
611.426875 54.73612 l
S
624.818875 52.075 m
624.818875 54.62524 l
S
581.294875 52.075 m
581.294875 54.51436 l
S
634.862875 52.075 m
634.862875 54.40348 l
S
142.706875 52.075 m
142.706875 54.40348 l
S
614.774875 52.075 m
614.774875 54.40348 l
S
591.338875 52.075 m
591.338875 54.2926 l
S
136.010875 52.075 m
136.010875 54.2926 l
S
644.906875 52.075 m
644.906875 54.2926 l
S
122.618875 52.075 m
122.618875 54.2926 l
S
112.574875 52.075 m
112.574875 54.2926 l
S
89.138875 52.075 m
89.138875 54.18172 l
S
132.662875 52.075 m
132.662875 53.95996 l
S
598.034875 52.075 m
598.034875 53.95996 l
S
119.270875 52.075 m
119.270875 53.95996 l
S
109.226875 52.075 m
109.226875 53.95996 l
S
85.790875 52.075 m
85.790875 53.95996 l
S
99.182875 52.075 m
99.182875 53.84908 l
S
621.470875 52.075 m
621.470875 53.84908 l
S
628.166875 52.075 m
628.166875 53.7382 l
S
115.922875 52.075 m
115.922875 53.7382 l
S
648.254875 52.075 m
648.254875 53.7382 l
S
604.730875 52.075 m
604.730875 53.7382 l
S
601.382875 52.075 m
601.382875 53.7382 l
S
95.834875 52.075 m
95.834875 53.7382 l
S
641.558875 52.075 m
641.558875 53.62732 l
S
651.602875 52.075 m
651.602875 53.51644 l
S
715.214875 52.075 m
715.214875 53.40556 l
S
92.486875 52.075 m
92.486875 53.40556 l
S
102.530875 52.075 m
102.530875 53.40556 l
S
658.298875 52.075 m
658.298875 53.40556 l
S
718.562875 52.075 m
718.562875 53.40556 l
S
618.122875 52.075 m
618.122875 53.29468 l
S
661.646875 52.075 m
661.646875 53.29468 l
S
654.950875 52.075 m
654.950875 53.29468 l
S
668.342875 52.075 m
668.342875 53.1838 l
S
75.746875 52.075 m
75.746875 53.1838 l
S
631.514875 52.075 m
631.514875 53.1838 l
S
105.878875 52.075 m
105.878875 53.07292 l
S
681.734875 52.075 m
681.734875 52.96204 l
S
721.910875 52.075 m
721.910875 52.96204 l
S
735.302875 52.075 m
735.302875 52.96204 l
S
664.994875 52.075 m
664.994875 52.85116 l
S
698.474875 52.075 m
698.474875 52.85116 l
S
671.690875 52.075 m
671.690875 52.85116 l
S
725.258875 52.075 m
725.258875 52.85116 l
S
678.386875 52.075 m
678.386875 52.74028 l
S
745.346875 52.075 m
745.346875 52.74028 l
S
691.778875 52.075 m
691.778875 52.74028 l
S
798.914875 52.075 m
798.914875 52.74028 l
S
688.430875 52.075 m
688.430875 52.74028 l
S
675.038875 52.075 m
675.038875 52.74028 l
S
805.610875 52.075 m
805.610875 52.6294 l
S
701.822875 52.075 m
701.822875 52.6294 l
S
738.650875 52.075 m
738.650875 52.6294 l
S
755.390875 52.075 m
755.390875 52.6294 l
S
748.694875 52.075 m
748.694875 52.51852 l
S
695.126875 52.075 m
695.126875 52.51852 l
S
768.782875 52.075 m
768.782875 52.51852 l
S
775.478875 52.075 m
775.478875 52.51852 l
S
762.086875 52.075 m
762.086875 52.40764 l
S
731.954875 52.075 m
731.954875 52.40764 l
S
802.262875 52.075 m
802.262875 52.40764 l
S
705.170875 52.075 m
705.170875 52.40764 l
S
741.998875 52.075 m
741.998875 52.40764 l
S
752.042875 52.075 m
752.042875 52.40764 l
S
795.566875 52.075 m
795.566875 52.40764 l
S
829.046875 52.075 m
829.046875 52.29676 l
S
711.866875 52.075 m
711.866875 52.29676 l
S
728.606875 52.075 m
728.606875 52.29676 l
S
708.518875 52.075 m
708.518875 52.29676 l
S
785.522875 52.075 m
785.522875 52.29676 l
S
685.082875 52.075 m
685.082875 52.29676 l
S
792.218875 52.075 m
792.218875 52.29676 l
S
902.702875 52.075 m
902.702875 52.18588 l
S
812.306875 52.075 m
812.306875 52.18588 l
S
808.958875 52.075 m
808.958875 52.18588 l
S
842.438875 52.075 m
842.438875 52.18588 l
S
889.310875 52.075 m
889.310875 52.18588 l
S
852.482875 52.075 m
852.482875 52.18588 l
S
758.738875 52.075 m
758.738875 52.18588 l
S
788.870875 52.075 m
788.870875 52.18588 l
S
869.222875 52.075 m
869.222875 52.18588 l
S
885.962875 52.075 m
885.962875 52.18588 l
S
822.350875 52.075 m
822.350875 52.18588 l
S
865.874875 52.075 m
865.874875 52.18588 l
S
772.130875 52.075 m
772.130875 52.18588 l
S
849.134875 52.075 m
849.134875 52.18588 l
S
879.266875 52.075 m
879.266875 52.18588 l
S
Q
q
2 J
0 j
0.8 w
/DeviceRGB {} cs
[0 0 0] sc
75.746875 52.075 m
75.746875 606.475 l
S
912.746875 52.075 m
912.746875 606.475 l
S
75.746875 52.075 m
912.746875 52.075 l
S
75.746875 606.475 m
912.746875 606.475 l
S
0 J
/DeviceGray {} cs
[0] sc
1 j
1 w
/DeviceGray {} cs
[0] sc
[1 0 0 1 0 0] Tm
0 0 Td
289.153125 624.240625 Td
/F14_0 24 Tf
(GREYC-NISLAB Holds Histogram)
[18.6
0
16.68
0
15.168
0
14.664
0
16.752
0
8.664
0
17.952
0
7.08
0
15.24
0
13.368
0
16.416
0
16.464
0
7.632
0
18.048
0
14.688
0
6.672
0
15.24
0
12.504
0
7.632
0
18.048
0
6.672
0
12.504
0
9.408
0
14.688
0
15.24
0
9.864
0
14.712
0
23.376
0] Tj
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_14_0
%%EOF
