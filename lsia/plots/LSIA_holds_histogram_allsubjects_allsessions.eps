%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 21.05.0 (http://poppler.freedesktop.org)
%%Creator: Matplotlib v3.3.3, https://matplotlib.org
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 944 650
%%HiResBoundingBox: 0 0 943.814063 649.675
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_14_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -463 1794 1233] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 30 dict def
CharProcs begin
/A {
684 0 8 0 676 729 setcachedevice
q
342 632 m
208 269 l
476 269 l
342 632 l
286 729 m
398 729 l
676 0 l
573 0 l
507 187 l
178 187 l
112 0 l
8 0 l
286 729 l
f
Q
} def
/H {
752 0 98 0 654 729 setcachedevice
q
98 729 m
197 729 l
197 430 l
555 430 l
555 729 l
654 729 l
654 0 l
555 0 l
555 347 l
197 347 l
197 0 l
98 0 l
98 729 l
f
Q
} def
/I {
295 0 98 0 197 729 setcachedevice
q
98 0 99 729 re
f
Q
} def
/L {
557 0 98 0 552 729 setcachedevice
q
98 729 m
197 729 l
197 83 l
552 83 l
552 0 l
98 0 l
98 729 l
f
Q
} def
/M {
863 0 98 0 765 729 setcachedevice
q
98 729 m
245 729 l
431 233 l
618 729 l
765 729 l
765 0 l
669 0 l
669 640 l
481 140 l
382 140 l
194 640 l
194 0 l
98 0 l
98 729 l
f
Q
} def
/O {
787 0 56 -13 731 742 setcachedevice
q
394 662 m
322 662 265 635 223 582 c
181 528 160 456 160 364 c
160 272 181 199 223 146 c
265 92 322 66 394 66 c
465 66 522 92 564 146 c
606 199 627 272 627 364 c
627 456 606 528 564 582 c
522 635 465 662 394 662 c
394 742 m
496 742 577 707 639 639 c
700 571 731 479 731 364 c
731 248 700 157 639 89 c
577 21 496 -13 394 -13 c
291 -13 209 21 148 89 c
86 157 56 248 56 364 c
56 479 86 571 148 639 c
209 707 291 742 394 742 c
f
Q
} def
/S {
635 0 66 -13 579 742 setcachedevice
q
535 705 m
535 609 l
497 627 462 640 429 649 c
395 657 363 662 333 662 c
279 662 237 651 208 631 c
179 610 165 580 165 542 c
165 510 174 485 194 469 c
213 452 250 439 304 429 c
364 417 l
437 403 491 378 526 343 c
561 307 579 260 579 201 c
579 130 555 77 508 41 c
460 5 391 -13 300 -13 c
265 -13 228 -9 189 -2 c
150 5 110 16 69 32 c
69 134 l
109 111 148 94 186 83 c
224 71 262 66 300 66 c
356 66 399 77 430 99 c
460 121 476 152 476 194 c
476 230 465 258 443 278 c
421 298 385 313 335 323 c
275 335 l
201 349 148 372 115 404 c
82 435 66 478 66 534 c
66 598 88 649 134 686 c
179 723 242 742 322 742 c
356 742 390 739 426 733 c
461 727 497 717 535 705 c
f
Q
} def
/a {
613 0 60 -13 522 560 setcachedevice
q
343 275 m
270 275 220 266 192 250 c
164 233 150 205 150 165 c
150 133 160 107 181 89 c
202 70 231 61 267 61 c
317 61 357 78 387 114 c
417 149 432 196 432 255 c
432 275 l
343 275 l
522 312 m
522 0 l
432 0 l
432 83 l
411 49 385 25 355 10 c
325 -5 287 -13 243 -13 c
187 -13 142 2 109 33 c
76 64 60 106 60 159 c
60 220 80 266 122 298 c
163 329 224 345 306 345 c
432 345 l
432 354 l
432 395 418 427 391 450 c
364 472 326 484 277 484 c
245 484 215 480 185 472 c
155 464 127 453 100 439 c
100 522 l
132 534 164 544 195 550 c
226 556 256 560 286 560 c
365 560 424 539 463 498 c
502 457 522 395 522 312 c
f
Q
} def
/c {
550 0 55 -13 488 560 setcachedevice
q
488 526 m
488 442 l
462 456 437 466 411 473 c
385 480 360 484 334 484 c
276 484 230 465 198 428 c
166 391 150 339 150 273 c
150 206 166 154 198 117 c
230 80 276 62 334 62 c
360 62 385 65 411 72 c
437 79 462 90 488 104 c
488 21 l
462 9 436 0 410 -5 c
383 -10 354 -13 324 -13 c
242 -13 176 12 128 64 c
79 115 55 185 55 273 c
55 362 79 432 128 483 c
177 534 244 560 330 560 c
358 560 385 557 411 551 c
437 545 463 537 488 526 c
f
Q
} def
/d {
635 0 55 -13 544 760 setcachedevice
q
454 464 m
454 760 l
544 760 l
544 0 l
454 0 l
454 82 l
435 49 411 25 382 10 c
353 -5 319 -13 279 -13 c
213 -13 159 13 117 65 c
75 117 55 187 55 273 c
55 359 75 428 117 481 c
159 533 213 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
148 273 m
148 207 161 155 188 117 c
215 79 253 61 301 61 c
348 61 385 79 413 117 c
440 155 454 207 454 273 c
454 339 440 390 413 428 c
385 466 348 485 301 485 c
253 485 215 466 188 428 c
161 390 148 339 148 273 c
f
Q
} def
/e {
615 0 55 -13 562 560 setcachedevice
q
562 296 m
562 252 l
149 252 l
153 190 171 142 205 110 c
238 78 284 62 344 62 c
378 62 412 66 444 74 c
476 82 509 95 541 113 c
541 28 l
509 14 476 3 442 -3 c
408 -9 373 -13 339 -13 c
251 -13 182 12 131 62 c
80 112 55 181 55 268 c
55 357 79 428 127 481 c
175 533 241 560 323 560 c
397 560 455 536 498 489 c
540 441 562 377 562 296 c
472 322 m
471 371 457 410 431 440 c
404 469 368 484 324 484 c
274 484 234 469 204 441 c
174 413 156 373 152 322 c
472 322 l
f
Q
} def
/eight {
636 0 68 -13 568 742 setcachedevice
q
318 346 m
271 346 234 333 207 308 c
180 283 167 249 167 205 c
167 161 180 126 207 101 c
234 76 271 64 318 64 c
364 64 401 76 428 102 c
455 127 469 161 469 205 c
469 249 455 283 429 308 c
402 333 365 346 318 346 c
219 388 m
177 398 144 418 120 447 c
96 476 85 511 85 553 c
85 611 105 657 147 691 c
188 725 245 742 318 742 c
390 742 447 725 489 691 c
530 657 551 611 551 553 c
551 511 539 476 515 447 c
491 418 459 398 417 388 c
464 377 501 355 528 323 c
554 291 568 251 568 205 c
568 134 546 80 503 43 c
459 5 398 -13 318 -13 c
237 -13 175 5 132 43 c
89 80 68 134 68 205 c
68 251 81 291 108 323 c
134 355 171 377 219 388 c
183 544 m
183 506 194 476 218 455 c
242 434 275 424 318 424 c
360 424 393 434 417 455 c
441 476 453 506 453 544 c
453 582 441 611 417 632 c
393 653 360 664 318 664 c
275 664 242 653 218 632 c
194 611 183 582 183 544 c
f
Q
} def
/five {
636 0 77 -13 549 729 setcachedevice
q
108 729 m
495 729 l
495 646 l
198 646 l
198 467 l
212 472 227 476 241 478 c
255 480 270 482 284 482 c
365 482 429 459 477 415 c
525 370 549 310 549 234 c
549 155 524 94 475 51 c
426 8 357 -13 269 -13 c
238 -13 207 -10 175 -6 c
143 -1 111 6 77 17 c
77 116 l
106 100 136 88 168 80 c
199 72 232 69 267 69 c
323 69 368 83 401 113 c
433 143 450 183 450 234 c
450 284 433 324 401 354 c
368 384 323 399 267 399 c
241 399 214 396 188 390 c
162 384 135 375 108 363 c
108 729 l
f
Q
} def
/four {
636 0 49 0 580 729 setcachedevice
q
378 643 m
129 254 l
378 254 l
378 643 l
352 729 m
476 729 l
476 254 l
580 254 l
580 172 l
476 172 l
476 0 l
378 0 l
378 172 l
49 172 l
49 267 l
352 729 l
f
Q
} def
/g {
635 0 55 -207 544 560 setcachedevice
q
454 280 m
454 344 440 395 414 431 c
387 467 349 485 301 485 c
253 485 215 467 188 431 c
161 395 148 344 148 280 c
148 215 161 165 188 129 c
215 93 253 75 301 75 c
349 75 387 93 414 129 c
440 165 454 215 454 280 c
544 68 m
544 -24 523 -93 482 -139 c
440 -184 377 -207 292 -207 c
260 -207 231 -204 203 -200 c
175 -195 147 -188 121 -178 c
121 -91 l
147 -105 173 -115 199 -122 c
225 -129 251 -133 278 -133 c
336 -133 380 -117 410 -87 c
439 -56 454 -10 454 52 c
454 96 l
435 64 411 40 382 24 c
353 8 319 0 279 0 c
211 0 157 25 116 76 c
75 127 55 195 55 280 c
55 364 75 432 116 483 c
157 534 211 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
454 547 l
544 547 l
544 68 l
f
Q
} def
/i {
278 0 94 0 184 760 setcachedevice
q
94 547 m
184 547 l
184 0 l
94 0 l
94 547 l
94 760 m
184 760 l
184 646 l
94 646 l
94 760 l
f
Q
} def
/l {
278 0 94 0 184 760 setcachedevice
q
94 0 90 760 re
f
Q
} def
/m {
974 0 91 0 889 560 setcachedevice
q
520 442 m
542 482 569 511 600 531 c
631 550 668 560 711 560 c
767 560 811 540 842 500 c
873 460 889 403 889 330 c
889 0 l
799 0 l
799 327 l
799 379 789 418 771 444 c
752 469 724 482 686 482 c
639 482 602 466 575 435 c
548 404 535 362 535 309 c
535 0 l
445 0 l
445 327 l
445 379 435 418 417 444 c
398 469 369 482 331 482 c
285 482 248 466 221 435 c
194 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
201 495 226 520 255 536 c
283 552 317 560 357 560 c
397 560 430 550 458 530 c
486 510 506 480 520 442 c
f
Q
} def
/n {
634 0 91 0 549 560 setcachedevice
q
549 330 m
549 0 l
459 0 l
459 327 l
459 379 448 417 428 443 c
408 469 378 482 338 482 c
289 482 251 466 223 435 c
195 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
202 494 227 519 257 535 c
286 551 320 560 358 560 c
420 560 468 540 500 501 c
532 462 549 405 549 330 c
f
Q
} def
/o {
612 0 55 -13 557 560 setcachedevice
q
306 484 m
258 484 220 465 192 427 c
164 389 150 338 150 273 c
150 207 163 156 191 118 c
219 80 257 62 306 62 c
354 62 392 80 420 118 c
448 156 462 207 462 273 c
462 337 448 389 420 427 c
392 465 354 484 306 484 c
306 560 m
384 560 445 534 490 484 c
534 433 557 363 557 273 c
557 183 534 113 490 63 c
445 12 384 -13 306 -13 c
227 -13 165 12 121 63 c
77 113 55 183 55 273 c
55 363 77 433 121 484 c
165 534 227 560 306 560 c
f
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
124 83 m
285 83 l
285 639 l
110 604 l
110 694 l
284 729 l
383 729 l
383 83 l
544 83 l
544 0 l
124 0 l
124 83 l
f
Q
} def
/r {
411 0 91 0 411 560 setcachedevice
q
411 463 m
401 469 390 473 378 476 c
366 478 353 480 339 480 c
288 480 249 463 222 430 c
194 397 181 350 181 288 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
199 495 224 520 254 536 c
284 552 321 560 365 560 c
371 560 378 559 386 559 c
393 558 401 557 411 555 c
411 463 l
f
Q
} def
/s {
521 0 54 -13 472 560 setcachedevice
q
443 531 m
443 446 l
417 458 391 468 364 475 c
336 481 308 485 279 485 c
234 485 200 478 178 464 c
156 450 145 430 145 403 c
145 382 153 366 169 354 c
185 342 217 330 265 320 c
296 313 l
360 299 405 279 432 255 c
458 230 472 195 472 151 c
472 100 452 60 412 31 c
372 1 316 -13 246 -13 c
216 -13 186 -10 154 -5 c
122 0 89 8 54 20 c
54 113 l
87 95 120 82 152 74 c
184 65 216 61 248 61 c
290 61 323 68 346 82 c
368 96 380 117 380 144 c
380 168 371 187 355 200 c
339 213 303 226 247 238 c
216 245 l
160 257 119 275 95 299 c
70 323 58 356 58 399 c
58 450 76 490 112 518 c
148 546 200 560 268 560 c
301 560 332 557 362 552 c
391 547 418 540 443 531 c
f
Q
} def
/six {
636 0 70 -13 573 742 setcachedevice
q
330 404 m
286 404 251 388 225 358 c
199 328 186 286 186 234 c
186 181 199 139 225 109 c
251 79 286 64 330 64 c
374 64 409 79 435 109 c
461 139 474 181 474 234 c
474 286 461 328 435 358 c
409 388 374 404 330 404 c
526 713 m
526 623 l
501 635 476 644 451 650 c
425 656 400 659 376 659 c
310 659 260 637 226 593 c
192 549 172 482 168 394 c
187 422 211 444 240 459 c
269 474 301 482 336 482 c
409 482 467 459 509 415 c
551 371 573 310 573 234 c
573 159 550 99 506 54 c
462 9 403 -13 330 -13 c
246 -13 181 19 137 83 c
92 147 70 241 70 364 c
70 479 97 571 152 639 c
206 707 280 742 372 742 c
396 742 421 739 447 735 c
472 730 498 723 526 713 c
f
Q
} def
/space {
318 0 0 0 0 0 setcachedevice
q
Q
} def
/t {
392 0 27 0 368 702 setcachedevice
q
183 702 m
183 547 l
368 547 l
368 477 l
183 477 l
183 180 l
183 135 189 106 201 94 c
213 81 238 75 276 75 c
368 75 l
368 0 l
276 0 l
206 0 158 13 132 39 c
106 65 93 112 93 180 c
93 477 l
27 477 l
27 547 l
93 547 l
93 702 l
183 702 l
f
Q
} def
/three {
636 0 76 -13 556 742 setcachedevice
q
406 393 m
453 383 490 362 516 330 c
542 298 556 258 556 212 c
556 140 531 84 482 45 c
432 6 362 -13 271 -13 c
240 -13 208 -10 176 -4 c
144 1 110 10 76 22 c
76 117 l
103 101 133 89 166 81 c
198 73 232 69 268 69 c
330 69 377 81 409 105 c
441 129 458 165 458 212 c
458 254 443 288 413 312 c
383 336 341 349 287 349 c
202 349 l
202 430 l
291 430 l
339 430 376 439 402 459 c
428 478 441 506 441 543 c
441 580 427 609 401 629 c
374 649 336 659 287 659 c
260 659 231 656 200 650 c
169 644 135 635 98 623 c
98 711 l
135 721 170 729 203 734 c
235 739 266 742 296 742 c
370 742 429 725 473 691 c
517 657 539 611 539 553 c
539 513 527 479 504 451 c
481 423 448 403 406 393 c
f
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
192 83 m
536 83 l
536 0 l
73 0 l
73 83 l
110 121 161 173 226 239 c
290 304 331 346 348 365 c
380 400 402 430 414 455 c
426 479 433 504 433 528 c
433 566 419 598 392 622 c
365 646 330 659 286 659 c
255 659 222 653 188 643 c
154 632 117 616 78 594 c
78 694 l
118 710 155 722 189 730 c
223 738 255 742 284 742 c
359 742 419 723 464 685 c
509 647 532 597 532 534 c
532 504 526 475 515 449 c
504 422 484 390 454 354 c
446 344 420 317 376 272 c
332 227 271 164 192 83 c
f
Q
} def
/u {
634 0 85 -13 543 560 setcachedevice
q
85 216 m
85 547 l
175 547 l
175 219 l
175 167 185 129 205 103 c
225 77 255 64 296 64 c
344 64 383 79 411 110 c
439 141 453 183 453 237 c
453 547 l
543 547 l
543 0 l
453 0 l
453 84 l
431 50 405 26 377 10 c
348 -5 315 -13 277 -13 c
214 -13 166 6 134 45 c
101 83 85 140 85 216 c
311 560 m
311 560 l
f
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
318 664 m
267 664 229 639 203 589 c
177 539 165 464 165 364 c
165 264 177 189 203 139 c
229 89 267 64 318 64 c
369 64 407 89 433 139 c
458 189 471 264 471 364 c
471 464 458 539 433 589 c
407 639 369 664 318 664 c
318 742 m
399 742 461 709 505 645 c
548 580 570 486 570 364 c
570 241 548 147 505 83 c
461 19 399 -13 318 -13 c
236 -13 173 19 130 83 c
87 147 66 241 66 364 c
66 486 87 580 130 645 c
173 709 236 742 318 742 c
f
Q
} def
end
currentdict end
/T3_14_0 exch definefont pop
%%EndResource
/F14_0 /T3_14_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 943.814063 649.675 re
W
q
1 j
/DeviceGray {} cs
[1] sc
0 j
0 w
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
0 0 943.814062 649.675 re
f
/DeviceGray {} CS
[0] SC
85.29375 52.075 837 554.4 re
f
/DeviceGray {} cs
[0] sc
1 j
0.8 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
85.29375 52.075 m
85.29375 48.575 l
f
85.29375 52.075 m
85.29375 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
80.520312 33.684375 Td
/F14_0 15 Tf
(0)
[9.54
0] Tj
0.8 w
252.69375 52.075 m
252.69375 48.575 l
f
252.69375 52.075 m
252.69375 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
238.373438 33.684375 Td
/F14_0 15 Tf
(100)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
420.09375 52.075 m
420.09375 48.575 l
f
420.09375 52.075 m
420.09375 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
405.773437 33.684375 Td
/F14_0 15 Tf
(200)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
587.49375 52.075 m
587.49375 48.575 l
f
587.49375 52.075 m
587.49375 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
573.173438 33.684375 Td
/F14_0 15 Tf
(300)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
754.89375 52.075 m
754.89375 48.575 l
f
754.89375 52.075 m
754.89375 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
740.573438 33.684375 Td
/F14_0 15 Tf
(400)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
922.29375 52.075 m
922.29375 48.575 l
f
922.29375 52.075 m
922.29375 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
907.973438 33.684375 Td
/F14_0 15 Tf
(500)
[9.54
0
9.54
0
9.54
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
443.160938 11.35625 Td
/F14_0 20 Tf
(Milliseconds)
[17.26
0
5.56
0
5.56
0
5.56
0
5.56
0
10.42
0
12.3
0
11
0
12.24
0
12.68
0
12.7
0
10.42
0] Tj
0.8 w
85.29375 52.075 m
81.79375 52.075 l
f
85.29375 52.075 m
81.79375 52.075 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
68.746875 46.379687 Td
/F14_0 15 Tf
(0)
[9.54
0] Tj
0.8 w
85.29375 121.375 m
81.79375 121.375 l
f
85.29375 121.375 m
81.79375 121.375 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 115.679687 Td
/F14_0 15 Tf
(2000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
85.29375 190.675 m
81.79375 190.675 l
f
85.29375 190.675 m
81.79375 190.675 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 184.979687 Td
/F14_0 15 Tf
(4000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
85.29375 259.975 m
81.79375 259.975 l
f
85.29375 259.975 m
81.79375 259.975 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 254.279687 Td
/F14_0 15 Tf
(6000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
85.29375 329.275 m
81.79375 329.275 l
f
85.29375 329.275 m
81.79375 329.275 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 323.579688 Td
/F14_0 15 Tf
(8000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
85.29375 398.575 m
81.79375 398.575 l
f
85.29375 398.575 m
81.79375 398.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 392.879688 Td
/F14_0 15 Tf
(10000)
[9.54
0
9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
85.29375 467.875 m
81.79375 467.875 l
f
85.29375 467.875 m
81.79375 467.875 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 462.179688 Td
/F14_0 15 Tf
(12000)
[9.54
0
9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
85.29375 537.175 m
81.79375 537.175 l
f
85.29375 537.175 m
81.79375 537.175 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 531.479688 Td
/F14_0 15 Tf
(14000)
[9.54
0
9.54
0
9.54
0
9.54
0
9.54
0] Tj
0.8 w
85.29375 606.475 m
81.79375 606.475 l
f
85.29375 606.475 m
81.79375 606.475 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 600.779688 Td
/F14_0 15 Tf
(16000)
[9.54
0
9.54
0
9.54
0
9.54
0
9.54
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 22.403125 266.923437] Tm
0 0 Td
0 0 Td
/F14_0 20 Tf
(Occurrences)
[15.74
0
11
0
11
0
12.68
0
8.22
0
8.22
0
12.3
0
12.68
0
11
0
12.3
0
10.42
0] Tj
q
85.29375 52.075 837 554.4 re
W
0.75 w
/DeviceRGB {} cs
[0 0 0] sc
205.82175 52.075 m
205.82175 584.0911 l
S
192.42975 52.075 m
192.42975 551.035 l
S
215.86575 52.075 m
215.86575 526.0177 l
S
219.21375 52.075 m
219.21375 496.25335 l
S
172.34175 52.075 m
172.34175 362.22715 l
S
179.03775 52.075 m
179.03775 359.0047 l
S
232.60575 52.075 m
232.60575 346.49605 l
S
242.64975 52.075 m
242.64975 303.0103 l
S
189.08175 52.075 m
189.08175 272.5183 l
S
190.75575 52.075 m
190.75575 250.03045 l
S
245.99775 52.075 m
245.99775 238.9771 l
S
165.64575 52.075 m
165.64575 218.70685 l
S
251.01975 52.075 m
251.01975 217.7713 l
S
249.34575 52.075 m
249.34575 215.79625 l
S
163.97175 52.075 m
163.97175 203.3569 l
S
267.75975 52.075 m
267.75975 178.0624 l
S
240.97575 52.075 m
240.97575 175.53295 l
S
259.38975 52.075 m
259.38975 167.113 l
S
112.07775 52.075 m
112.07775 153.4609 l
S
294.54375 52.075 m
294.54375 150.03055 l
S
272.78175 52.075 m
272.78175 141.22945 l
S
98.68575 52.075 m
98.68575 135.96265 l
S
200.79975 52.075 m
200.79975 128.68615 l
S
152.25375 52.075 m
152.25375 128.4436 l
S
138.86175 52.075 m
138.86175 126.60715 l
S
170.66775 52.075 m
170.66775 126.0874 l
S
269.43375 52.075 m
269.43375 123.62725 l
S
214.19175 52.075 m
214.19175 123.5233 l
S
207.49575 52.075 m
207.49575 123.48865 l
S
286.17375 52.075 m
286.17375 116.97445 l
S
137.18775 52.075 m
137.18775 115.58845 l
S
225.90975 52.075 m
225.90975 114.41035 l
S
217.53975 52.075 m
217.53975 112.5739 l
S
194.10375 52.075 m
194.10375 111.70765 l
S
125.46975 52.075 m
125.46975 105.26275 l
S
244.32375 52.075 m
244.32375 101.24335 l
S
299.56575 52.075 m
299.56575 100.13455 l
S
195.77775 52.075 m
195.77775 99.85735 l
S
220.88775 52.075 m
220.88775 96.46165 l
S
239.30175 52.075 m
239.30175 95.42215 l
S
312.95775 52.075 m
312.95775 93.3085 l
S
97.01175 52.075 m
97.01175 90.77905 l
S
162.29775 52.075 m
162.29775 88.3189 l
S
110.40375 52.075 m
110.40375 88.0417 l
S
209.16975 52.075 m
209.16975 85.8934 l
S
326.34975 52.075 m
326.34975 85.37365 l
S
321.32775 52.075 m
321.32775 85.09645 l
S
212.51775 52.075 m
212.51775 84.88855 l
S
319.65375 52.075 m
319.65375 84.7153 l
S
247.67175 52.075 m
247.67175 84.05695 l
S
204.14775 52.075 m
204.14775 83.57185 l
S
346.43775 52.075 m
346.43775 82.9828 l
S
182.38575 52.075 m
182.38575 82.25515 l
S
224.23575 52.075 m
224.23575 81.28495 l
S
257.71575 52.075 m
257.71575 80.73055 l
S
237.62775 52.075 m
237.62775 80.73055 l
S
210.84375 52.075 m
210.84375 76.98835 l
S
276.12975 52.075 m
276.12975 76.0528 l
S
229.25775 52.075 m
229.25775 75.60235 l
S
202.47375 52.075 m
202.47375 75.5677 l
S
339.74175 52.075 m
339.74175 75.2212 l
S
187.40775 52.075 m
187.40775 73.7659 l
S
230.93175 52.075 m
230.93175 72.89965 l
S
199.12575 52.075 m
199.12575 72.27595 l
S
234.27975 52.075 m
234.27975 71.8255 l
S
262.73775 52.075 m
262.73775 71.79085 l
S
174.01575 52.075 m
174.01575 71.65225 l
S
264.41175 52.075 m
264.41175 71.2018 l
S
168.99375 52.075 m
168.99375 69.8158 l
S
227.58375 52.075 m
227.58375 69.5386 l
S
175.68975 52.075 m
175.68975 68.88025 l
S
328.02375 52.075 m
328.02375 68.8456 l
S
282.82575 52.075 m
282.82575 68.5684 l
S
113.75175 52.075 m
113.75175 68.3605 l
S
177.36375 52.075 m
177.36375 68.2219 l
S
180.71175 52.075 m
180.71175 67.3903 l
S
353.13375 52.075 m
353.13375 66.5587 l
S
185.73375 52.075 m
185.73375 66.17755 l
S
252.69375 52.075 m
252.69375 66.1429 l
S
145.55775 52.075 m
145.55775 66.1429 l
S
256.04175 52.075 m
256.04175 65.69245 l
S
222.56175 52.075 m
222.56175 65.3113 l
S
287.84775 52.075 m
287.84775 65.242 l
S
120.44775 52.075 m
120.44775 65.242 l
S
301.23975 52.075 m
301.23975 65.0341 l
S
292.86975 52.075 m
292.86975 64.8262 l
S
271.10775 52.075 m
271.10775 64.3411 l
S
105.38175 52.075 m
105.38175 64.23715 l
S
366.52575 52.075 m
366.52575 64.2025 l
S
373.22175 52.075 m
373.22175 64.16785 l
S
307.93575 52.075 m
307.93575 63.9946 l
S
197.45175 52.075 m
197.45175 63.40555 l
S
304.58775 52.075 m
304.58775 63.3709 l
S
127.14375 52.075 m
127.14375 63.19765 l
S
167.31975 52.075 m
167.31975 62.9551 l
S
329.69775 52.075 m
329.69775 62.9551 l
S
289.52175 52.075 m
289.52175 62.3314 l
S
107.05575 52.075 m
107.05575 62.08885 l
S
235.95375 52.075 m
235.95375 61.88095 l
S
348.11175 52.075 m
348.11175 61.777 l
S
102.03375 52.075 m
102.03375 61.777 l
S
314.63175 52.075 m
314.63175 61.5691 l
S
133.83975 52.075 m
133.83975 61.32655 l
S
184.05975 52.075 m
184.05975 61.2226 l
S
281.15175 52.075 m
281.15175 60.98005 l
S
317.97975 52.075 m
317.97975 60.9454 l
S
157.27575 52.075 m
157.27575 60.63355 l
S
302.91375 52.075 m
302.91375 60.5989 l
S
254.36775 52.075 m
254.36775 60.3217 l
S
311.28375 52.075 m
311.28375 60.28705 l
S
108.72975 52.075 m
108.72975 60.1138 l
S
316.30575 52.075 m
316.30575 60.0445 l
S
132.16575 52.075 m
132.16575 59.94055 l
S
371.54775 52.075 m
371.54775 59.94055 l
S
331.37175 52.075 m
331.37175 59.7673 l
S
351.45975 52.075 m
351.45975 59.7673 l
S
266.08575 52.075 m
266.08575 59.7673 l
S
398.33175 52.075 m
398.33175 59.52475 l
S
277.80375 52.075 m
277.80375 59.24755 l
S
379.91775 52.075 m
379.91775 59.24755 l
S
150.57975 52.075 m
150.57975 59.17825 l
S
284.49975 52.075 m
284.49975 59.0743 l
S
261.06375 52.075 m
261.06375 59.03965 l
S
274.45575 52.075 m
274.45575 58.9357 l
S
158.94975 52.075 m
158.94975 58.7278 l
S
100.35975 52.075 m
100.35975 58.55455 l
S
115.42575 52.075 m
115.42575 58.5199 l
S
296.21775 52.075 m
296.21775 58.27735 l
S
279.47775 52.075 m
279.47775 58.06945 l
S
349.78575 52.075 m
349.78575 57.93085 l
S
306.26175 52.075 m
306.26175 57.86155 l
S
140.53575 52.075 m
140.53575 57.8269 l
S
333.04575 52.075 m
333.04575 57.65365 l
S
361.50375 52.075 m
361.50375 57.51505 l
S
364.85175 52.075 m
364.85175 57.4111 l
S
123.79575 52.075 m
123.79575 57.3418 l
S
309.60975 52.075 m
309.60975 57.30715 l
S
324.67575 52.075 m
324.67575 57.2032 l
S
297.89175 52.075 m
297.89175 57.0646 l
S
393.30975 52.075 m
393.30975 56.96065 l
S
344.76375 52.075 m
344.76375 56.7874 l
S
368.19975 52.075 m
368.19975 56.7181 l
S
425.11575 52.075 m
425.11575 56.68345 l
S
291.19575 52.075 m
291.19575 56.6488 l
S
143.88375 52.075 m
143.88375 56.5795 l
S
341.41575 52.075 m
341.41575 56.54485 l
S
363.17775 52.075 m
363.17775 56.4409 l
S
406.70175 52.075 m
406.70175 56.3023 l
S
118.77375 52.075 m
118.77375 56.233 l
S
359.82975 52.075 m
359.82975 56.233 l
S
343.08975 52.075 m
343.08975 56.1637 l
S
128.81775 52.075 m
128.81775 56.12905 l
S
153.92775 52.075 m
153.92775 56.05975 l
S
323.00175 52.075 m
323.00175 55.8172 l
S
354.80775 52.075 m
354.80775 55.7479 l
S
130.49175 52.075 m
130.49175 55.50535 l
S
117.09975 52.075 m
117.09975 55.43605 l
S
336.39375 52.075 m
336.39375 55.36675 l
S
147.23175 52.075 m
147.23175 55.1935 l
S
400.00575 52.075 m
400.00575 55.1935 l
S
160.62375 52.075 m
160.62375 54.95095 l
S
369.87375 52.075 m
369.87375 54.9163 l
S
122.12175 52.075 m
122.12175 54.9163 l
S
148.90575 52.075 m
148.90575 54.88165 l
S
358.15575 52.075 m
358.15575 54.74305 l
S
338.06775 52.075 m
338.06775 54.6391 l
S
103.70775 52.075 m
103.70775 54.6391 l
S
155.60175 52.075 m
155.60175 54.60445 l
S
135.51375 52.075 m
135.51375 54.53515 l
S
374.89575 52.075 m
374.89575 54.5005 l
S
420.09375 52.075 m
420.09375 54.32725 l
S
356.48175 52.075 m
356.48175 54.11935 l
S
716.39175 52.075 m
716.39175 54.0847 l
S
95.33775 52.075 m
95.33775 53.8075 l
S
383.26575 52.075 m
383.26575 53.5996 l
S
142.20975 52.075 m
142.20975 53.56495 l
S
376.56975 52.075 m
376.56975 53.56495 l
S
477.00975 52.075 m
477.00975 53.461 l
S
433.48575 52.075 m
433.48575 53.3917 l
S
334.71975 52.075 m
334.71975 53.3917 l
S
450.22575 52.075 m
450.22575 53.3917 l
S
451.89975 52.075 m
451.89975 53.3224 l
S
714.71775 52.075 m
714.71775 53.3224 l
S
86.96775 52.075 m
86.96775 53.28775 l
S
394.98375 52.075 m
394.98375 53.1145 l
S
389.96175 52.075 m
389.96175 53.1145 l
S
381.59175 52.075 m
381.59175 53.07985 l
S
91.98975 52.075 m
91.98975 53.0452 l
S
405.02775 52.075 m
405.02775 53.01055 l
S
423.44175 52.075 m
423.44175 53.01055 l
S
88.64175 52.075 m
88.64175 52.9759 l
S
378.24375 52.075 m
378.24375 52.9759 l
S
386.61375 52.075 m
386.61375 52.94125 l
S
90.31575 52.075 m
90.31575 52.94125 l
S
93.66375 52.075 m
93.66375 52.9066 l
S
446.87775 52.075 m
446.87775 52.9066 l
S
384.93975 52.075 m
384.93975 52.9066 l
S
460.26975 52.075 m
460.26975 52.8373 l
S
473.66175 52.075 m
473.66175 52.8373 l
S
396.65775 52.075 m
396.65775 52.8373 l
S
723.08775 52.075 m
723.08775 52.8373 l
S
721.41375 52.075 m
721.41375 52.768 l
S
401.67975 52.075 m
401.67975 52.73335 l
S
500.44575 52.075 m
500.44575 52.6987 l
S
388.28775 52.075 m
388.28775 52.66405 l
S
426.78975 52.075 m
426.78975 52.4908 l
S
403.35375 52.075 m
403.35375 52.4908 l
S
413.39775 52.075 m
413.39775 52.45615 l
S
554.01375 52.075 m
554.01375 52.4215 l
S
478.68375 52.075 m
478.68375 52.4215 l
S
528.90375 52.075 m
528.90375 52.38685 l
S
391.63575 52.075 m
391.63575 52.38685 l
S
411.72375 52.075 m
411.72375 52.38685 l
S
421.76775 52.075 m
421.76775 52.38685 l
S
418.41975 52.075 m
418.41975 52.38685 l
S
503.79375 52.075 m
503.79375 52.3522 l
S
487.05375 52.075 m
487.05375 52.3522 l
S
428.46375 52.075 m
428.46375 52.31755 l
S
607.58175 52.075 m
607.58175 52.31755 l
S
435.15975 52.075 m
435.15975 52.31755 l
S
483.70575 52.075 m
483.70575 52.31755 l
S
415.07175 52.075 m
415.07175 52.31755 l
S
555.68775 52.075 m
555.68775 52.31755 l
S
513.83775 52.075 m
513.83775 52.2829 l
S
560.70975 52.075 m
560.70975 52.2829 l
S
632.69175 52.075 m
632.69175 52.2829 l
S
431.81175 52.075 m
431.81175 52.2829 l
S
634.36575 52.075 m
634.36575 52.2829 l
S
502.11975 52.075 m
502.11975 52.24825 l
S
580.79775 52.075 m
580.79775 52.24825 l
S
416.74575 52.075 m
416.74575 52.24825 l
S
620.97375 52.075 m
620.97375 52.24825 l
S
408.37575 52.075 m
408.37575 52.24825 l
S
527.22975 52.075 m
527.22975 52.24825 l
S
430.13775 52.075 m
430.13775 52.24825 l
S
666.17175 52.075 m
666.17175 52.24825 l
S
470.31375 52.075 m
470.31375 52.2136 l
S
540.62175 52.075 m
540.62175 52.2136 l
S
567.40575 52.075 m
567.40575 52.2136 l
S
594.18975 52.075 m
594.18975 52.2136 l
S
533.92575 52.075 m
533.92575 52.2136 l
S
686.25975 52.075 m
686.25975 52.2136 l
S
445.20375 52.075 m
445.20375 52.2136 l
S
410.04975 52.075 m
410.04975 52.2136 l
S
443.52975 52.075 m
443.52975 52.2136 l
S
530.57775 52.075 m
530.57775 52.2136 l
S
687.93375 52.075 m
687.93375 52.2136 l
S
475.33575 52.075 m
475.33575 52.2136 l
S
436.83375 52.075 m
436.83375 52.17895 l
S
664.49775 52.075 m
664.49775 52.17895 l
S
441.85575 52.075 m
441.85575 52.17895 l
S
495.42375 52.075 m
495.42375 52.17895 l
S
674.54175 52.075 m
674.54175 52.17895 l
S
636.03975 52.075 m
636.03975 52.17895 l
S
518.85975 52.075 m
518.85975 52.17895 l
S
468.63975 52.075 m
468.63975 52.17895 l
S
661.14975 52.075 m
661.14975 52.17895 l
S
485.37975 52.075 m
485.37975 52.17895 l
S
790.04775 52.075 m
790.04775 52.1443 l
S
841.94175 52.075 m
841.94175 52.1443 l
S
885.46575 52.075 m
885.46575 52.1443 l
S
507.14175 52.075 m
507.14175 52.1443 l
S
766.61175 52.075 m
766.61175 52.1443 l
S
902.20575 52.075 m
902.20575 52.1443 l
S
552.33975 52.075 m
552.33975 52.1443 l
S
582.47175 52.075 m
582.47175 52.1443 l
S
848.63775 52.075 m
848.63775 52.1443 l
S
448.55175 52.075 m
448.55175 52.1443 l
S
463.61775 52.075 m
463.61775 52.1443 l
S
646.08375 52.075 m
646.08375 52.1443 l
S
458.59575 52.075 m
458.59575 52.1443 l
S
768.28575 52.075 m
768.28575 52.1443 l
S
609.25575 52.075 m
609.25575 52.1443 l
S
928.98975 52.075 m
928.98975 52.1443 l
S
805.11375 52.075 m
805.11375 52.1443 l
S
557.36175 52.075 m
557.36175 52.1443 l
S
440.18175 52.075 m
440.18175 52.1443 l
S
466.96575 52.075 m
466.96575 52.1443 l
S
639.38775 52.075 m
639.38775 52.1443 l
S
619.29975 52.075 m
619.29975 52.1443 l
S
617.62575 52.075 m
617.62575 52.1443 l
S
488.72775 52.075 m
488.72775 52.1443 l
S
764.93775 52.075 m
764.93775 52.1443 l
S
803.43975 52.075 m
803.43975 52.1443 l
S
701.32575 52.075 m
701.32575 52.1443 l
S
659.47575 52.075 m
659.47575 52.1443 l
S
857.00775 52.075 m
857.00775 52.10965 l
S
461.94375 52.075 m
461.94375 52.10965 l
S
671.19375 52.075 m
671.19375 52.10965 l
S
532.25175 52.075 m
532.25175 52.10965 l
S
438.50775 52.075 m
438.50775 52.10965 l
S
672.86775 52.075 m
672.86775 52.10965 l
S
471.98775 52.075 m
471.98775 52.10965 l
S
669.51975 52.075 m
669.51975 52.10965 l
S
738.15375 52.075 m
738.15375 52.10965 l
S
918.94575 52.075 m
918.94575 52.10965 l
S
713.04375 52.075 m
713.04375 52.10965 l
S
490.40175 52.075 m
490.40175 52.10965 l
S
843.61575 52.075 m
843.61575 52.10965 l
S
925.64175 52.075 m
925.64175 52.10965 l
S
520.53375 52.075 m
520.53375 52.10965 l
S
676.21575 52.075 m
676.21575 52.10965 l
S
753.21975 52.075 m
753.21975 52.10965 l
S
850.31175 52.075 m
850.31175 52.10965 l
S
453.57375 52.075 m
453.57375 52.10965 l
S
641.06175 52.075 m
641.06175 52.10965 l
S
493.74975 52.075 m
493.74975 52.10965 l
S
543.96975 52.075 m
543.96975 52.10965 l
S
711.36975 52.075 m
711.36975 52.10965 l
S
637.71375 52.075 m
637.71375 52.10965 l
S
754.89375 52.075 m
754.89375 52.10965 l
S
908.90175 52.075 m
908.90175 52.10965 l
S
515.51175 52.075 m
515.51175 52.10965 l
S
942.38175 52.075 m
942.38175 52.10965 l
S
878.76975 52.075 m
878.76975 52.10965 l
S
769.95975 52.075 m
769.95975 52.10965 l
S
828.54975 52.075 m
828.54975 52.10965 l
S
525.55575 52.075 m
525.55575 52.10965 l
S
860.35575 52.075 m
860.35575 52.10965 l
S
542.29575 52.075 m
542.29575 52.10965 l
S
781.67775 52.075 m
781.67775 52.10965 l
S
508.81575 52.075 m
508.81575 52.10965 l
S
895.50975 52.075 m
895.50975 52.10965 l
S
684.58575 52.075 m
684.58575 52.10965 l
S
537.27375 52.075 m
537.27375 52.10965 l
S
910.57575 52.075 m
910.57575 52.10965 l
S
786.69975 52.075 m
786.69975 52.10965 l
S
915.59775 52.075 m
915.59775 52.10965 l
S
647.75775 52.075 m
647.75775 52.10965 l
S
667.84575 52.075 m
667.84575 52.10965 l
S
564.05775 52.075 m
564.05775 52.10965 l
S
791.72175 52.075 m
791.72175 52.10965 l
S
708.02175 52.075 m
708.02175 52.10965 l
S
579.12375 52.075 m
579.12375 52.10965 l
S
691.28175 52.075 m
691.28175 52.10965 l
S
595.86375 52.075 m
595.86375 52.10965 l
S
681.23775 52.075 m
681.23775 52.10965 l
S
835.24575 52.075 m
835.24575 52.10965 l
S
562.38375 52.075 m
562.38375 52.10965 l
S
689.60775 52.075 m
689.60775 52.10965 l
S
806.78775 52.075 m
806.78775 52.10965 l
S
868.72575 52.075 m
868.72575 52.10965 l
S
572.42775 52.075 m
572.42775 52.10965 l
S
780.00375 52.075 m
780.00375 52.10965 l
S
654.45375 52.075 m
654.45375 52.10965 l
S
743.17575 52.075 m
743.17575 52.10965 l
S
622.64775 52.075 m
622.64775 52.10965 l
S
456.92175 52.075 m
456.92175 52.10965 l
S
548.99175 52.075 m
548.99175 52.10965 l
S
920.61975 52.075 m
920.61975 52.10965 l
S
615.95175 52.075 m
615.95175 52.10965 l
S
570.75375 52.075 m
570.75375 52.10965 l
S
887.13975 52.075 m
887.13975 52.10965 l
S
893.83575 52.075 m
893.83575 52.10965 l
S
624.32175 52.075 m
624.32175 52.10965 l
S
505.46775 52.075 m
505.46775 52.10965 l
S
718.06575 52.075 m
718.06575 52.10965 l
S
741.50175 52.075 m
741.50175 52.10965 l
S
575.77575 52.075 m
575.77575 52.10965 l
S
498.77175 52.075 m
498.77175 52.10965 l
S
610.92975 52.075 m
610.92975 52.10965 l
S
816.83175 52.075 m
816.83175 52.10965 l
S
776.65575 52.075 m
776.65575 52.10965 l
S
821.85375 52.075 m
821.85375 52.10965 l
S
748.19775 52.075 m
748.19775 52.10965 l
S
888.81375 52.075 m
888.81375 52.10965 l
S
Q
q
2 J
0 j
0.8 w
/DeviceRGB {} cs
[0 0 0] sc
85.29375 52.075 m
85.29375 606.475 l
S
922.29375 52.075 m
922.29375 606.475 l
S
85.29375 52.075 m
922.29375 52.075 l
S
85.29375 606.475 m
922.29375 606.475 l
S
0 J
/DeviceGray {} cs
[0] sc
1 j
1 w
/DeviceGray {} cs
[0] sc
[1 0 0 1 0 0] Tm
0 0 Td
360.79375 624.240625 Td
/F14_0 24 Tf
(LSIA Holds Histogram)
[13.368
0
15.24
0
7.08
0
16.416
0
7.632
0
18.048
0
14.688
0
6.672
0
15.24
0
12.504
0
7.632
0
18.048
0
6.672
0
12.504
0
9.408
0
14.688
0
15.24
0
9.864
0
14.712
0
23.376
0] Tj
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_14_0
%%EOF
