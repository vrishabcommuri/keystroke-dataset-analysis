%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 21.05.0 (http://poppler.freedesktop.org)
%%Creator: Matplotlib v3.3.3, https://matplotlib.org
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 920 650
%%HiResBoundingBox: 0 0 919.946875 649.675
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_14_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -463 1794 1233] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 30 dict def
CharProcs begin
/H {
752 0 98 0 654 729 setcachedevice
q
98 729 m
197 729 l
197 430 l
555 430 l
555 729 l
654 729 l
654 0 l
555 0 l
555 347 l
197 347 l
197 0 l
98 0 l
98 729 l
f
Q
} def
/K {
656 0 98 0 677 729 setcachedevice
q
98 729 m
197 729 l
197 421 l
524 729 l
651 729 l
289 389 l
677 0 l
547 0 l
197 351 l
197 0 l
98 0 l
98 729 l
f
Q
} def
/M {
863 0 98 0 765 729 setcachedevice
q
98 729 m
245 729 l
431 233 l
618 729 l
765 729 l
765 0 l
669 0 l
669 640 l
481 140 l
382 140 l
194 640 l
194 0 l
98 0 l
98 729 l
f
Q
} def
/O {
787 0 56 -13 731 742 setcachedevice
q
394 662 m
322 662 265 635 223 582 c
181 528 160 456 160 364 c
160 272 181 199 223 146 c
265 92 322 66 394 66 c
465 66 522 92 564 146 c
606 199 627 272 627 364 c
627 456 606 528 564 582 c
522 635 465 662 394 662 c
394 742 m
496 742 577 707 639 639 c
700 571 731 479 731 364 c
731 248 700 157 639 89 c
577 21 496 -13 394 -13 c
291 -13 209 21 148 89 c
86 157 56 248 56 364 c
56 479 86 571 148 639 c
209 707 291 742 394 742 c
f
Q
} def
/S {
635 0 66 -13 579 742 setcachedevice
q
535 705 m
535 609 l
497 627 462 640 429 649 c
395 657 363 662 333 662 c
279 662 237 651 208 631 c
179 610 165 580 165 542 c
165 510 174 485 194 469 c
213 452 250 439 304 429 c
364 417 l
437 403 491 378 526 343 c
561 307 579 260 579 201 c
579 130 555 77 508 41 c
460 5 391 -13 300 -13 c
265 -13 228 -9 189 -2 c
150 5 110 16 69 32 c
69 134 l
109 111 148 94 186 83 c
224 71 262 66 300 66 c
356 66 399 77 430 99 c
460 121 476 152 476 194 c
476 230 465 258 443 278 c
421 298 385 313 335 323 c
275 335 l
201 349 148 372 115 404 c
82 435 66 478 66 534 c
66 598 88 649 134 686 c
179 723 242 742 322 742 c
356 742 390 739 426 733 c
461 727 497 717 535 705 c
f
Q
} def
/T {
611 0 -2 0 614 729 setcachedevice
q
-2 729 m
614 729 l
614 646 l
355 646 l
355 0 l
256 0 l
256 646 l
-2 646 l
-2 729 l
f
Q
} def
/a {
613 0 60 -13 522 560 setcachedevice
q
343 275 m
270 275 220 266 192 250 c
164 233 150 205 150 165 c
150 133 160 107 181 89 c
202 70 231 61 267 61 c
317 61 357 78 387 114 c
417 149 432 196 432 255 c
432 275 l
343 275 l
522 312 m
522 0 l
432 0 l
432 83 l
411 49 385 25 355 10 c
325 -5 287 -13 243 -13 c
187 -13 142 2 109 33 c
76 64 60 106 60 159 c
60 220 80 266 122 298 c
163 329 224 345 306 345 c
432 345 l
432 354 l
432 395 418 427 391 450 c
364 472 326 484 277 484 c
245 484 215 480 185 472 c
155 464 127 453 100 439 c
100 522 l
132 534 164 544 195 550 c
226 556 256 560 286 560 c
365 560 424 539 463 498 c
502 457 522 395 522 312 c
f
Q
} def
/c {
550 0 55 -13 488 560 setcachedevice
q
488 526 m
488 442 l
462 456 437 466 411 473 c
385 480 360 484 334 484 c
276 484 230 465 198 428 c
166 391 150 339 150 273 c
150 206 166 154 198 117 c
230 80 276 62 334 62 c
360 62 385 65 411 72 c
437 79 462 90 488 104 c
488 21 l
462 9 436 0 410 -5 c
383 -10 354 -13 324 -13 c
242 -13 176 12 128 64 c
79 115 55 185 55 273 c
55 362 79 432 128 483 c
177 534 244 560 330 560 c
358 560 385 557 411 551 c
437 545 463 537 488 526 c
f
Q
} def
/d {
635 0 55 -13 544 760 setcachedevice
q
454 464 m
454 760 l
544 760 l
544 0 l
454 0 l
454 82 l
435 49 411 25 382 10 c
353 -5 319 -13 279 -13 c
213 -13 159 13 117 65 c
75 117 55 187 55 273 c
55 359 75 428 117 481 c
159 533 213 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
148 273 m
148 207 161 155 188 117 c
215 79 253 61 301 61 c
348 61 385 79 413 117 c
440 155 454 207 454 273 c
454 339 440 390 413 428 c
385 466 348 485 301 485 c
253 485 215 466 188 428 c
161 390 148 339 148 273 c
f
Q
} def
/e {
615 0 55 -13 562 560 setcachedevice
q
562 296 m
562 252 l
149 252 l
153 190 171 142 205 110 c
238 78 284 62 344 62 c
378 62 412 66 444 74 c
476 82 509 95 541 113 c
541 28 l
509 14 476 3 442 -3 c
408 -9 373 -13 339 -13 c
251 -13 182 12 131 62 c
80 112 55 181 55 268 c
55 357 79 428 127 481 c
175 533 241 560 323 560 c
397 560 455 536 498 489 c
540 441 562 377 562 296 c
472 322 m
471 371 457 410 431 440 c
404 469 368 484 324 484 c
274 484 234 469 204 441 c
174 413 156 373 152 322 c
472 322 l
f
Q
} def
/eight {
636 0 68 -13 568 742 setcachedevice
q
318 346 m
271 346 234 333 207 308 c
180 283 167 249 167 205 c
167 161 180 126 207 101 c
234 76 271 64 318 64 c
364 64 401 76 428 102 c
455 127 469 161 469 205 c
469 249 455 283 429 308 c
402 333 365 346 318 346 c
219 388 m
177 398 144 418 120 447 c
96 476 85 511 85 553 c
85 611 105 657 147 691 c
188 725 245 742 318 742 c
390 742 447 725 489 691 c
530 657 551 611 551 553 c
551 511 539 476 515 447 c
491 418 459 398 417 388 c
464 377 501 355 528 323 c
554 291 568 251 568 205 c
568 134 546 80 503 43 c
459 5 398 -13 318 -13 c
237 -13 175 5 132 43 c
89 80 68 134 68 205 c
68 251 81 291 108 323 c
134 355 171 377 219 388 c
183 544 m
183 506 194 476 218 455 c
242 434 275 424 318 424 c
360 424 393 434 417 455 c
441 476 453 506 453 544 c
453 582 441 611 417 632 c
393 653 360 664 318 664 c
275 664 242 653 218 632 c
194 611 183 582 183 544 c
f
Q
} def
/five {
636 0 77 -13 549 729 setcachedevice
q
108 729 m
495 729 l
495 646 l
198 646 l
198 467 l
212 472 227 476 241 478 c
255 480 270 482 284 482 c
365 482 429 459 477 415 c
525 370 549 310 549 234 c
549 155 524 94 475 51 c
426 8 357 -13 269 -13 c
238 -13 207 -10 175 -6 c
143 -1 111 6 77 17 c
77 116 l
106 100 136 88 168 80 c
199 72 232 69 267 69 c
323 69 368 83 401 113 c
433 143 450 183 450 234 c
450 284 433 324 401 354 c
368 384 323 399 267 399 c
241 399 214 396 188 390 c
162 384 135 375 108 363 c
108 729 l
f
Q
} def
/four {
636 0 49 0 580 729 setcachedevice
q
378 643 m
129 254 l
378 254 l
378 643 l
352 729 m
476 729 l
476 254 l
580 254 l
580 172 l
476 172 l
476 0 l
378 0 l
378 172 l
49 172 l
49 267 l
352 729 l
f
Q
} def
/g {
635 0 55 -207 544 560 setcachedevice
q
454 280 m
454 344 440 395 414 431 c
387 467 349 485 301 485 c
253 485 215 467 188 431 c
161 395 148 344 148 280 c
148 215 161 165 188 129 c
215 93 253 75 301 75 c
349 75 387 93 414 129 c
440 165 454 215 454 280 c
544 68 m
544 -24 523 -93 482 -139 c
440 -184 377 -207 292 -207 c
260 -207 231 -204 203 -200 c
175 -195 147 -188 121 -178 c
121 -91 l
147 -105 173 -115 199 -122 c
225 -129 251 -133 278 -133 c
336 -133 380 -117 410 -87 c
439 -56 454 -10 454 52 c
454 96 l
435 64 411 40 382 24 c
353 8 319 0 279 0 c
211 0 157 25 116 76 c
75 127 55 195 55 280 c
55 364 75 432 116 483 c
157 534 211 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
454 547 l
544 547 l
544 68 l
f
Q
} def
/hyphen {
361 0 49 234 312 314 setcachedevice
q
49 234 263 80 re
f
Q
} def
/i {
278 0 94 0 184 760 setcachedevice
q
94 547 m
184 547 l
184 0 l
94 0 l
94 547 l
94 760 m
184 760 l
184 646 l
94 646 l
94 760 l
f
Q
} def
/l {
278 0 94 0 184 760 setcachedevice
q
94 0 90 760 re
f
Q
} def
/m {
974 0 91 0 889 560 setcachedevice
q
520 442 m
542 482 569 511 600 531 c
631 550 668 560 711 560 c
767 560 811 540 842 500 c
873 460 889 403 889 330 c
889 0 l
799 0 l
799 327 l
799 379 789 418 771 444 c
752 469 724 482 686 482 c
639 482 602 466 575 435 c
548 404 535 362 535 309 c
535 0 l
445 0 l
445 327 l
445 379 435 418 417 444 c
398 469 369 482 331 482 c
285 482 248 466 221 435 c
194 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
201 495 226 520 255 536 c
283 552 317 560 357 560 c
397 560 430 550 458 530 c
486 510 506 480 520 442 c
f
Q
} def
/n {
634 0 91 0 549 560 setcachedevice
q
549 330 m
549 0 l
459 0 l
459 327 l
459 379 448 417 428 443 c
408 469 378 482 338 482 c
289 482 251 466 223 435 c
195 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
202 494 227 519 257 535 c
286 551 320 560 358 560 c
420 560 468 540 500 501 c
532 462 549 405 549 330 c
f
Q
} def
/o {
612 0 55 -13 557 560 setcachedevice
q
306 484 m
258 484 220 465 192 427 c
164 389 150 338 150 273 c
150 207 163 156 191 118 c
219 80 257 62 306 62 c
354 62 392 80 420 118 c
448 156 462 207 462 273 c
462 337 448 389 420 427 c
392 465 354 484 306 484 c
306 560 m
384 560 445 534 490 484 c
534 433 557 363 557 273 c
557 183 534 113 490 63 c
445 12 384 -13 306 -13 c
227 -13 165 12 121 63 c
77 113 55 183 55 273 c
55 363 77 433 121 484 c
165 534 227 560 306 560 c
f
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
124 83 m
285 83 l
285 639 l
110 604 l
110 694 l
284 729 l
383 729 l
383 83 l
544 83 l
544 0 l
124 0 l
124 83 l
f
Q
} def
/r {
411 0 91 0 411 560 setcachedevice
q
411 463 m
401 469 390 473 378 476 c
366 478 353 480 339 480 c
288 480 249 463 222 430 c
194 397 181 350 181 288 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
199 495 224 520 254 536 c
284 552 321 560 365 560 c
371 560 378 559 386 559 c
393 558 401 557 411 555 c
411 463 l
f
Q
} def
/s {
521 0 54 -13 472 560 setcachedevice
q
443 531 m
443 446 l
417 458 391 468 364 475 c
336 481 308 485 279 485 c
234 485 200 478 178 464 c
156 450 145 430 145 403 c
145 382 153 366 169 354 c
185 342 217 330 265 320 c
296 313 l
360 299 405 279 432 255 c
458 230 472 195 472 151 c
472 100 452 60 412 31 c
372 1 316 -13 246 -13 c
216 -13 186 -10 154 -5 c
122 0 89 8 54 20 c
54 113 l
87 95 120 82 152 74 c
184 65 216 61 248 61 c
290 61 323 68 346 82 c
368 96 380 117 380 144 c
380 168 371 187 355 200 c
339 213 303 226 247 238 c
216 245 l
160 257 119 275 95 299 c
70 323 58 356 58 399 c
58 450 76 490 112 518 c
148 546 200 560 268 560 c
301 560 332 557 362 552 c
391 547 418 540 443 531 c
f
Q
} def
/six {
636 0 70 -13 573 742 setcachedevice
q
330 404 m
286 404 251 388 225 358 c
199 328 186 286 186 234 c
186 181 199 139 225 109 c
251 79 286 64 330 64 c
374 64 409 79 435 109 c
461 139 474 181 474 234 c
474 286 461 328 435 358 c
409 388 374 404 330 404 c
526 713 m
526 623 l
501 635 476 644 451 650 c
425 656 400 659 376 659 c
310 659 260 637 226 593 c
192 549 172 482 168 394 c
187 422 211 444 240 459 c
269 474 301 482 336 482 c
409 482 467 459 509 415 c
551 371 573 310 573 234 c
573 159 550 99 506 54 c
462 9 403 -13 330 -13 c
246 -13 181 19 137 83 c
92 147 70 241 70 364 c
70 479 97 571 152 639 c
206 707 280 742 372 742 c
396 742 421 739 447 735 c
472 730 498 723 526 713 c
f
Q
} def
/space {
318 0 0 0 0 0 setcachedevice
q
Q
} def
/t {
392 0 27 0 368 702 setcachedevice
q
183 702 m
183 547 l
368 547 l
368 477 l
183 477 l
183 180 l
183 135 189 106 201 94 c
213 81 238 75 276 75 c
368 75 l
368 0 l
276 0 l
206 0 158 13 132 39 c
106 65 93 112 93 180 c
93 477 l
27 477 l
27 547 l
93 547 l
93 702 l
183 702 l
f
Q
} def
/three {
636 0 76 -13 556 742 setcachedevice
q
406 393 m
453 383 490 362 516 330 c
542 298 556 258 556 212 c
556 140 531 84 482 45 c
432 6 362 -13 271 -13 c
240 -13 208 -10 176 -4 c
144 1 110 10 76 22 c
76 117 l
103 101 133 89 166 81 c
198 73 232 69 268 69 c
330 69 377 81 409 105 c
441 129 458 165 458 212 c
458 254 443 288 413 312 c
383 336 341 349 287 349 c
202 349 l
202 430 l
291 430 l
339 430 376 439 402 459 c
428 478 441 506 441 543 c
441 580 427 609 401 629 c
374 649 336 659 287 659 c
260 659 231 656 200 650 c
169 644 135 635 98 623 c
98 711 l
135 721 170 729 203 734 c
235 739 266 742 296 742 c
370 742 429 725 473 691 c
517 657 539 611 539 553 c
539 513 527 479 504 451 c
481 423 448 403 406 393 c
f
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
192 83 m
536 83 l
536 0 l
73 0 l
73 83 l
110 121 161 173 226 239 c
290 304 331 346 348 365 c
380 400 402 430 414 455 c
426 479 433 504 433 528 c
433 566 419 598 392 622 c
365 646 330 659 286 659 c
255 659 222 653 188 643 c
154 632 117 616 78 594 c
78 694 l
118 710 155 722 189 730 c
223 738 255 742 284 742 c
359 742 419 723 464 685 c
509 647 532 597 532 534 c
532 504 526 475 515 449 c
504 422 484 390 454 354 c
446 344 420 317 376 272 c
332 227 271 164 192 83 c
f
Q
} def
/u {
634 0 85 -13 543 560 setcachedevice
q
85 216 m
85 547 l
175 547 l
175 219 l
175 167 185 129 205 103 c
225 77 255 64 296 64 c
344 64 383 79 411 110 c
439 141 453 183 453 237 c
453 547 l
543 547 l
543 0 l
453 0 l
453 84 l
431 50 405 26 377 10 c
348 -5 315 -13 277 -13 c
214 -13 166 6 134 45 c
101 83 85 140 85 216 c
311 560 m
311 560 l
f
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
318 664 m
267 664 229 639 203 589 c
177 539 165 464 165 364 c
165 264 177 189 203 139 c
229 89 267 64 318 64 c
369 64 407 89 433 139 c
458 189 471 264 471 364 c
471 464 458 539 433 589 c
407 639 369 664 318 664 c
318 742 m
399 742 461 709 505 645 c
548 580 570 486 570 364 c
570 241 548 147 505 83 c
461 19 399 -13 318 -13 c
236 -13 173 19 130 83 c
87 147 66 241 66 364 c
66 486 87 580 130 645 c
173 709 236 742 318 742 c
f
Q
} def
end
currentdict end
/T3_14_0 exch definefont pop
%%EndResource
/F14_0 /T3_14_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 919.946875 649.675 re
W
q
1 j
/DeviceGray {} cs
[1] sc
0 j
0 w
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
0 0 919.946875 649.675 re
f
/DeviceGray {} CS
[0] SC
75.746875 52.075 837 554.4 re
f
/DeviceGray {} cs
[0] sc
1 j
0.8 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
113.79233 52.075 m
113.79233 48.575 l
f
113.79233 52.075 m
113.79233 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
109.018892 33.684375 Td
/F14_0 15 Tf
(0)
[9.54
0] Tj
0.8 w
223.118348 52.075 m
223.118348 48.575 l
f
223.118348 52.075 m
223.118348 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
213.571473 33.684375 Td
/F14_0 15 Tf
(50)
[9.54
0
9.54
0] Tj
0.8 w
332.444367 52.075 m
332.444367 48.575 l
f
332.444367 52.075 m
332.444367 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
318.124055 33.684375 Td
/F14_0 15 Tf
(100)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
441.770386 52.075 m
441.770386 48.575 l
f
441.770386 52.075 m
441.770386 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
427.450073 33.684375 Td
/F14_0 15 Tf
(150)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
551.096405 52.075 m
551.096405 48.575 l
f
551.096405 52.075 m
551.096405 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
536.776092 33.684375 Td
/F14_0 15 Tf
(200)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
660.422424 52.075 m
660.422424 48.575 l
f
660.422424 52.075 m
660.422424 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
646.102111 33.684375 Td
/F14_0 15 Tf
(250)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
769.748442 52.075 m
769.748442 48.575 l
f
769.748442 52.075 m
769.748442 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
755.42813 33.684375 Td
/F14_0 15 Tf
(300)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
879.074461 52.075 m
879.074461 48.575 l
f
879.074461 52.075 m
879.074461 48.575 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
864.754149 33.684375 Td
/F14_0 15 Tf
(350)
[9.54
0
9.54
0
9.54
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
433.614063 11.35625 Td
/F14_0 20 Tf
(Milliseconds)
[17.26
0
5.56
0
5.56
0
5.56
0
5.56
0
10.42
0
12.3
0
11
0
12.24
0
12.68
0
12.7
0
10.42
0] Tj
0.8 w
75.746875 52.075 m
72.246875 52.075 l
f
75.746875 52.075 m
72.246875 52.075 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
59.2 46.379687 Td
/F14_0 15 Tf
(0)
[9.54
0] Tj
0.8 w
75.746875 162.955 m
72.246875 162.955 l
f
75.746875 162.955 m
72.246875 162.955 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 157.259687 Td
/F14_0 15 Tf
(200)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 273.835 m
72.246875 273.835 l
f
75.746875 273.835 m
72.246875 273.835 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 268.139688 Td
/F14_0 15 Tf
(400)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 384.715 m
72.246875 384.715 l
f
75.746875 384.715 m
72.246875 384.715 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 379.019688 Td
/F14_0 15 Tf
(600)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 495.595 m
72.246875 495.595 l
f
75.746875 495.595 m
72.246875 495.595 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
40.10625 489.899688 Td
/F14_0 15 Tf
(800)
[9.54
0
9.54
0
9.54
0] Tj
0.8 w
75.746875 606.475 m
72.246875 606.475 l
f
75.746875 606.475 m
72.246875 606.475 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
30.559375 600.779688 Td
/F14_0 15 Tf
(1000)
[9.54
0
9.54
0
9.54
0
9.54
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 22.403125 266.923437] Tm
0 0 Td
0 0 Td
/F14_0 20 Tf
(Occurrences)
[15.74
0
11
0
11
0
12.68
0
8.22
0
8.22
0
12.3
0
12.68
0
11
0
12.3
0
10.42
0] Tj
q
75.746875 52.075 837 554.4 re
W
0.75 w
/DeviceRGB {} cs
[0 0 0] sc
271.221797 52.075 m
271.221797 512.7814 l
S
323.698286 52.075 m
323.698286 386.9326 l
S
269.035276 52.075 m
269.035276 256.6486 l
S
376.174775 52.075 m
376.174775 200.6542 l
S
321.511765 52.075 m
321.511765 200.6542 l
S
218.745308 52.075 m
218.745308 181.8046 l
S
273.408317 52.075 m
273.408317 168.499 l
S
325.884806 52.075 m
325.884806 154.0846 l
S
253.729634 52.075 m
253.729634 151.867 l
S
266.848756 52.075 m
266.848756 151.867 l
S
288.71396 52.075 m
288.71396 142.4422 l
S
332.444367 52.075 m
332.444367 133.5718 l
S
306.206123 52.075 m
306.206123 133.0174 l
S
262.475715 52.075 m
262.475715 125.2558 l
S
264.662236 52.075 m
264.662236 124.7014 l
S
330.257847 52.075 m
330.257847 120.8206 l
S
260.289195 52.075 m
260.289195 118.603 l
S
275.594837 52.075 m
275.594837 118.603 l
S
328.071326 52.075 m
328.071326 118.603 l
S
286.527439 52.075 m
286.527439 117.4942 l
S
255.916154 52.075 m
255.916154 115.831 l
S
304.019602 52.075 m
304.019602 115.2766 l
S
258.102674 52.075 m
258.102674 113.6134 l
S
319.325245 52.075 m
319.325245 113.6134 l
S
282.154399 52.075 m
282.154399 111.9502 l
S
373.988254 52.075 m
373.988254 110.287 l
S
339.003928 52.075 m
339.003928 110.287 l
S
284.340919 52.075 m
284.340919 109.1782 l
S
310.579163 52.075 m
310.579163 105.8518 l
S
216.558787 52.075 m
216.558787 105.2974 l
S
308.392643 52.075 m
308.392643 105.2974 l
S
277.781358 52.075 m
277.781358 104.743 l
S
290.90048 52.075 m
290.90048 104.743 l
S
334.630888 52.075 m
334.630888 103.6342 l
S
341.190449 52.075 m
341.190449 103.6342 l
S
293.087 52.075 m
293.087 103.0798 l
S
251.543113 52.075 m
251.543113 103.0798 l
S
279.967878 52.075 m
279.967878 99.7534 l
S
378.361295 52.075 m
378.361295 99.199 l
S
317.138725 52.075 m
317.138725 98.6446 l
S
115.97885 52.075 m
115.97885 98.6446 l
S
358.682612 52.075 m
358.682612 98.0902 l
S
336.817408 52.075 m
336.817408 96.427 l
S
236.237471 52.075 m
236.237471 95.8726 l
S
249.356593 52.075 m
249.356593 95.8726 l
S
234.05095 52.075 m
234.05095 95.3182 l
S
301.833082 52.075 m
301.833082 95.3182 l
S
314.952204 52.075 m
314.952204 94.2094 l
S
371.801734 52.075 m
371.801734 93.655 l
S
428.651264 52.075 m
428.651264 93.1006 l
S
312.765684 52.075 m
312.765684 93.1006 l
S
411.159101 52.075 m
411.159101 93.1006 l
S
299.646562 52.075 m
299.646562 91.9918 l
S
295.273521 52.075 m
295.273521 90.883 l
S
343.376969 52.075 m
343.376969 90.3286 l
S
356.496091 52.075 m
356.496091 88.6654 l
S
220.931828 52.075 m
220.931828 88.111 l
S
238.423991 52.075 m
238.423991 88.111 l
S
297.460041 52.075 m
297.460041 87.5566 l
S
244.983552 52.075 m
244.983552 87.5566 l
S
214.372267 52.075 m
214.372267 87.5566 l
S
240.610511 52.075 m
240.610511 86.4478 l
S
395.853458 52.075 m
395.853458 86.4478 l
S
231.86443 52.075 m
231.86443 85.8934 l
S
380.547815 52.075 m
380.547815 85.339 l
S
354.309571 52.075 m
354.309571 84.7846 l
S
247.170072 52.075 m
247.170072 84.7846 l
S
360.869132 52.075 m
360.869132 84.2302 l
S
113.79233 52.075 m
113.79233 83.6758 l
S
347.75001 52.075 m
347.75001 83.1214 l
S
223.118348 52.075 m
223.118348 83.1214 l
S
227.491389 52.075 m
227.491389 82.567 l
S
382.734336 52.075 m
382.734336 82.0126 l
S
369.615214 52.075 m
369.615214 82.0126 l
S
345.563489 52.075 m
345.563489 81.4582 l
S
365.242173 52.075 m
365.242173 80.3494 l
S
352.123051 52.075 m
352.123051 79.795 l
S
212.185746 52.075 m
212.185746 79.795 l
S
207.812706 52.075 m
207.812706 79.2406 l
S
349.93653 52.075 m
349.93653 79.2406 l
S
363.055652 52.075 m
363.055652 79.2406 l
S
426.464743 52.075 m
426.464743 78.6862 l
S
367.428693 52.075 m
367.428693 78.6862 l
S
481.127753 52.075 m
481.127753 78.6862 l
S
225.304869 52.075 m
225.304869 78.1318 l
S
389.293897 52.075 m
389.293897 78.1318 l
S
393.666938 52.075 m
393.666938 77.5774 l
S
408.97258 52.075 m
408.97258 77.5774 l
S
391.480417 52.075 m
391.480417 77.023 l
S
387.107377 52.075 m
387.107377 75.9142 l
S
242.797032 52.075 m
242.797032 75.9142 l
S
398.039978 52.075 m
398.039978 74.8054 l
S
384.920856 52.075 m
384.920856 74.251 l
S
201.253145 52.075 m
201.253145 73.6966 l
S
205.626185 52.075 m
205.626185 73.6966 l
S
430.837784 52.075 m
430.837784 73.6966 l
S
209.999226 52.075 m
209.999226 73.1422 l
S
400.226499 52.075 m
400.226499 72.0334 l
S
402.413019 52.075 m
402.413019 72.0334 l
S
199.066624 52.075 m
199.066624 70.9246 l
S
203.439665 52.075 m
203.439665 70.9246 l
S
196.880104 52.075 m
196.880104 70.3702 l
S
404.59954 52.075 m
404.59954 70.3702 l
S
439.583866 52.075 m
439.583866 69.8158 l
S
419.905182 52.075 m
419.905182 69.8158 l
S
478.941232 52.075 m
478.941232 69.8158 l
S
406.78606 52.075 m
406.78606 68.707 l
S
415.532141 52.075 m
415.532141 68.707 l
S
229.677909 52.075 m
229.677909 67.5982 l
S
443.956906 52.075 m
443.956906 67.5982 l
S
417.718662 52.075 m
417.718662 66.4894 l
S
413.345621 52.075 m
413.345621 65.935 l
S
435.210825 52.075 m
435.210825 65.935 l
S
194.693583 52.075 m
194.693583 65.3806 l
S
437.397345 52.075 m
437.397345 64.8262 l
S
183.760982 52.075 m
183.760982 64.8262 l
S
192.507063 52.075 m
192.507063 64.2718 l
S
448.329947 52.075 m
448.329947 64.2718 l
S
424.278223 52.075 m
424.278223 64.2718 l
S
454.889508 52.075 m
454.889508 64.2718 l
S
450.516467 52.075 m
450.516467 63.7174 l
S
446.143427 52.075 m
446.143427 63.163 l
S
422.091703 52.075 m
422.091703 63.163 l
S
441.770386 52.075 m
441.770386 62.6086 l
S
468.00863 52.075 m
468.00863 62.6086 l
S
190.320543 52.075 m
190.320543 62.6086 l
S
179.387941 52.075 m
179.387941 62.0542 l
S
465.82211 52.075 m
465.82211 62.0542 l
S
463.63559 52.075 m
463.63559 62.0542 l
S
433.024304 52.075 m
433.024304 61.4998 l
S
533.604242 52.075 m
533.604242 61.4998 l
S
172.82838 52.075 m
172.82838 60.9454 l
S
476.754712 52.075 m
476.754712 60.9454 l
S
472.381671 52.075 m
472.381671 59.8366 l
S
181.574461 52.075 m
181.574461 59.8366 l
S
457.076029 52.075 m
457.076029 59.8366 l
S
474.568192 52.075 m
474.568192 59.8366 l
S
185.947502 52.075 m
185.947502 59.8366 l
S
177.20142 52.075 m
177.20142 59.2822 l
S
118.16537 52.075 m
118.16537 59.2822 l
S
485.500793 52.075 m
485.500793 59.2822 l
S
483.314273 52.075 m
483.314273 58.7278 l
S
188.134022 52.075 m
188.134022 58.7278 l
S
459.262549 52.075 m
459.262549 58.7278 l
S
535.790762 52.075 m
535.790762 58.1734 l
S
461.449069 52.075 m
461.449069 58.1734 l
S
120.351891 52.075 m
120.351891 58.1734 l
S
452.702988 52.075 m
452.702988 57.619 l
S
498.619916 52.075 m
498.619916 57.619 l
S
516.112079 52.075 m
516.112079 57.619 l
S
518.298599 52.075 m
518.298599 57.619 l
S
496.433395 52.075 m
496.433395 57.0646 l
S
586.080731 52.075 m
586.080731 57.0646 l
S
166.268819 52.075 m
166.268819 57.0646 l
S
170.641859 52.075 m
170.641859 57.0646 l
S
489.873834 52.075 m
489.873834 57.0646 l
S
131.284493 52.075 m
131.284493 57.0646 l
S
164.082298 52.075 m
164.082298 57.0646 l
S
159.709257 52.075 m
159.709257 56.5102 l
S
494.246875 52.075 m
494.246875 56.5102 l
S
161.895778 52.075 m
161.895778 56.5102 l
S
470.195151 52.075 m
470.195151 56.5102 l
S
168.455339 52.075 m
168.455339 56.5102 l
S
155.336217 52.075 m
155.336217 56.5102 l
S
524.85816 52.075 m
524.85816 56.5102 l
S
487.687314 52.075 m
487.687314 55.9558 l
S
520.48512 52.075 m
520.48512 55.9558 l
S
509.552518 52.075 m
509.552518 55.9558 l
S
540.163803 52.075 m
540.163803 55.9558 l
S
175.0149 52.075 m
175.0149 55.9558 l
S
122.538411 52.075 m
122.538411 55.9558 l
S
583.89421 52.075 m
583.89421 55.9558 l
S
157.522737 52.075 m
157.522737 55.9558 l
S
529.231201 52.075 m
529.231201 55.4014 l
S
150.963176 52.075 m
150.963176 55.4014 l
S
531.417721 52.075 m
531.417721 55.4014 l
S
144.403615 52.075 m
144.403615 55.4014 l
S
513.925558 52.075 m
513.925558 54.847 l
S
507.365997 52.075 m
507.365997 54.847 l
S
129.097972 52.075 m
129.097972 54.847 l
S
537.977283 52.075 m
537.977283 54.847 l
S
142.217094 52.075 m
142.217094 54.847 l
S
146.590135 52.075 m
146.590135 54.847 l
S
500.806436 52.075 m
500.806436 54.847 l
S
502.992957 52.075 m
502.992957 54.847 l
S
527.044681 52.075 m
527.044681 54.2926 l
S
542.350323 52.075 m
542.350323 54.2926 l
S
148.776656 52.075 m
148.776656 54.2926 l
S
555.469446 52.075 m
555.469446 54.2926 l
S
492.060355 52.075 m
492.060355 54.2926 l
S
546.723364 52.075 m
546.723364 54.2926 l
S
612.318975 52.075 m
612.318975 54.2926 l
S
551.096405 52.075 m
551.096405 54.2926 l
S
548.909884 52.075 m
548.909884 54.2926 l
S
126.911452 52.075 m
126.911452 53.7382 l
S
140.030574 52.075 m
140.030574 53.7382 l
S
124.724931 52.075 m
124.724931 53.7382 l
S
570.775088 52.075 m
570.775088 53.7382 l
S
137.844054 52.075 m
137.844054 53.7382 l
S
133.471013 52.075 m
133.471013 53.7382 l
S
505.179477 52.075 m
505.179477 53.7382 l
S
544.536844 52.075 m
544.536844 53.7382 l
S
511.739038 52.075 m
511.739038 53.7382 l
S
594.826812 52.075 m
594.826812 53.7382 l
S
691.033709 52.075 m
691.033709 53.7382 l
S
559.842486 52.075 m
559.842486 53.7382 l
S
557.655966 52.075 m
557.655966 53.7382 l
S
566.402047 52.075 m
566.402047 53.7382 l
S
636.370699 52.075 m
636.370699 53.1838 l
S
688.847188 52.075 m
688.847188 53.1838 l
S
581.70769 52.075 m
581.70769 53.1838 l
S
577.334649 52.075 m
577.334649 53.1838 l
S
710.712392 52.075 m
710.712392 53.1838 l
S
631.997659 52.075 m
631.997659 53.1838 l
S
522.67164 52.075 m
522.67164 53.1838 l
S
590.453772 52.075 m
590.453772 53.1838 l
S
579.52117 52.075 m
579.52117 53.1838 l
S
599.199853 52.075 m
599.199853 53.1838 l
S
153.149696 52.075 m
153.149696 53.1838 l
S
673.541546 52.075 m
673.541546 53.1838 l
S
627.624618 52.075 m
627.624618 53.1838 l
S
638.55722 52.075 m
638.55722 52.6294 l
S
572.961609 52.075 m
572.961609 52.6294 l
S
728.204555 52.075 m
728.204555 52.6294 l
S
739.137157 52.075 m
739.137157 52.6294 l
S
776.308004 52.075 m
776.308004 52.6294 l
S
789.427126 52.075 m
789.427126 52.6294 l
S
640.74374 52.075 m
640.74374 52.6294 l
S
629.811138 52.075 m
629.811138 52.6294 l
S
756.62932 52.075 m
756.62932 52.6294 l
S
653.862862 52.075 m
653.862862 52.6294 l
S
564.215527 52.075 m
564.215527 52.6294 l
S
621.065057 52.075 m
621.065057 52.6294 l
S
693.220229 52.075 m
693.220229 52.6294 l
S
675.728066 52.075 m
675.728066 52.6294 l
S
575.148129 52.075 m
575.148129 52.6294 l
S
664.795464 52.075 m
664.795464 52.6294 l
S
745.696718 52.075 m
745.696718 52.6294 l
S
704.152831 52.075 m
704.152831 52.6294 l
S
656.049383 52.075 m
656.049383 52.6294 l
S
708.525872 52.075 m
708.525872 52.6294 l
S
562.029007 52.075 m
562.029007 52.6294 l
S
660.422424 52.075 m
660.422424 52.6294 l
S
874.70142 52.075 m
874.70142 52.6294 l
S
614.505496 52.075 m
614.505496 52.6294 l
S
697.59327 52.075 m
697.59327 52.6294 l
S
852.836217 52.075 m
852.836217 52.6294 l
S
568.588568 52.075 m
568.588568 52.6294 l
S
647.303301 52.075 m
647.303301 52.6294 l
S
553.282925 52.075 m
553.282925 52.6294 l
S
592.640292 52.075 m
592.640292 52.6294 l
S
Q
q
2 J
0 j
0.8 w
/DeviceRGB {} cs
[0 0 0] sc
75.746875 52.075 m
75.746875 606.475 l
S
912.746875 52.075 m
912.746875 606.475 l
S
75.746875 52.075 m
912.746875 52.075 l
S
75.746875 606.475 m
912.746875 606.475 l
S
0 J
/DeviceGray {} cs
[0] sc
1 j
1 w
/DeviceGray {} cs
[0] sc
[1 0 0 1 0 0] Tm
0 0 Td
261.707813 624.240625 Td
/F14_0 24 Tf
(Kaggle-Training-Set Holds Histogram)
[15.744
0
14.712
0
15.24
0
15.24
0
6.672
0
14.76
0
8.664
0
14.664
0
9.864
0
14.712
0
6.672
0
15.216
0
6.672
0
15.216
0
15.24
0
8.664
0
15.24
0
14.76
0
9.408
0
7.632
0
18.048
0
14.688
0
6.672
0
15.24
0
12.504
0
7.632
0
18.048
0
6.672
0
12.504
0
9.408
0
14.688
0
15.24
0
9.864
0
14.712
0
23.376
0] Tj
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_14_0
%%EOF
